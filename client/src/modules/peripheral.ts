import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class peripheralModule extends BaseModule {
  constructor() {
    super(`peripheral`, `Find and control peripherals attached to this computer.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"getNames","detail":"getNames(): {","parameters":[],"documentation":"Provides a list of all peripherals available.\n\n**Returns:**\n- { string... } A list of the names of all attached peripherals."},{"label":"isPresent","detail":"isPresent(name: string): boolean","parameters":["name: string"],"documentation":"Determines if a peripheral is present with the given name.\n\n**Parameters:**\n- **name: string** The side or network name that you want to check.\n\n**Returns:**\n- boolean If a peripheral is present with the given name.\n\n**Usage:**\n\nperipheral.isPresent(\"top\")\n\n```\n\nperipheral.isPresent(\"monitor_0\")\n\n```"},{"label":"getType","detail":"getType(peripheral: string): string...","parameters":["peripheral: string"],"documentation":"Get the types of a named or wrapped peripheral.\n\n**Parameters:**\n- **peripheral: string** | table The name of the peripheral to find, or a\nwrapped peripheral instance.\n\n**Returns:**\n- string... The peripheral's types, or nil if it is not present.\n\n**Usage:**\n\nGet the type of a peripheral above this computer.\n\n```\n\nperipheral.getType(\"top\")\n\n```"},{"label":"hasType","detail":"hasType(peripheral: string, peripheral_type: string): boolean","parameters":["peripheral: string","peripheral_type: string"],"documentation":"Check if a peripheral is of a particular type.\n\n**Parameters:**\n- **peripheral: string** | table The name of the peripheral or a wrapped peripheral instance.\n- **peripheral_type: string** The type to check.\n\n**Returns:**\n- boolean | nil If a peripheral has a particular type, or nil if it is not present."},{"label":"getMethods","detail":"getMethods(name: string): { | it","parameters":["name: string"],"documentation":"Get all available methods for the peripheral with the given name.\n\n**Parameters:**\n- **name: string** The name of the peripheral to find.\n\n**Returns:**\n- { string... } | nil A list of methods provided by this peripheral, or nil if\n- it is not present."},{"label":"getName","detail":"getName(peripheral: table): string","parameters":["peripheral: table"],"documentation":"Get the name of a peripheral wrapped with peripheral.wrap.\n\n**Parameters:**\n- **peripheral: table** The peripheral to get the name of.\n\n**Returns:**\n- string The name of the given peripheral."},{"label":"call","detail":"call(name: string, method: string, ...  Additional arguments to pass to the method): The","parameters":["name: string","method: string","...  Additional arguments to pass to the method"],"documentation":"Call a method on the peripheral with the given name.\n\n**Parameters:**\n- **name: string** The name of the peripheral to invoke the method on.\n- **method: string** The name of the method\n- ...  Additional arguments to pass to the method\n\n**Returns:**\n- The return values of the peripheral method.\n\n**Usage:**\n\nOpen the modem on the top of this computer.\n\n```\n\nperipheral.call(\"top\", \"open\", 1)\n\n```"},{"label":"wrap","detail":"wrap(name: string): table | there","parameters":["name: string"],"documentation":"Get a table containing all functions available on a peripheral. These can\nthen be called instead of using peripheral.call every time.\n\n**Parameters:**\n- **name: string** The name of the peripheral to wrap.\n\n**Returns:**\n- table | nil The table containing the peripheral's methods, or nil if\n- there is no peripheral present with the given name.\n\n**Usage:**\n\nOpen the modem on the top of this computer.\n\n```\n\nlocal modem = peripheral.wrap(\"top\")\n\nmodem.open(1)\n\n```"},{"label":"find","detail":"find(ty: string, filter?: function): table...","parameters":["ty: string","filter?: function"],"documentation":"Find all peripherals of a specific type, and return the\nwrapped peripherals.\n\n**Parameters:**\n- **ty: string** The type of peripheral to look for.\n- **filter?: function**(name: string, wrapped: table):boolean A\nfilter function, which takes the peripheral's name and wrapped table\nand returns if it should be included in the result.\n\n**Returns:**\n- table... 0 or more wrapped peripherals matching the given filters.\n\n**Usage:**\n\nFind all monitors and store them in a table, writing \"Hello\" on each one.\n\n```\n\nlocal monitors = { peripheral.find(\"monitor\") }\n\nfor _, monitor in pairs(monitors) do\n\n  monitor.write(\"Hello\")\n\nend\n\nFind all wireless modems connected to this computer.\n\nlocal modems = { peripheral.find(\"modem\", function(name, modem)\n\n    return modem.isWireless() -- Check this modem is wireless.\n\nend) }\n\nThis abuses the filter argument to call rednet.open on every modem.\n\nperipheral.find(\"modem\", rednet.open)\n\n```"}];
  }
}
