import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class redstoneModule extends BaseModule {
  constructor() {
    super(`redstone`, `Get and set redstone signals adjacent to this computer.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"getSides","detail":"getSides(): {","parameters":[],"documentation":"Returns a table containing the six sides of the computer. Namely, \"top\", \"bottom\", \"left\", \"right\", \"front\" and\n\"back\".\n\n**Returns:**\n- { string... } A table of valid sides."},{"label":"setOutput","detail":"setOutput(side: string, on: boolean): void","parameters":["side: string","on: boolean"],"documentation":"Turn the redstone signal of a specific side on or off.\n\n**Parameters:**\n- **side: string** The side to set.\n- **on: boolean** Whether the redstone signal should be on or off. When on, a signal strength of 15 is emitted."},{"label":"getOutput","detail":"getOutput(side: string): boolean","parameters":["side: string"],"documentation":"Get the current redstone output of a specific side.\n\n**Parameters:**\n- **side: string** The side to get.\n\n**Returns:**\n- boolean Whether the redstone output is on or off."},{"label":"getInput","detail":"getInput(side: string): boolean","parameters":["side: string"],"documentation":"Get the current redstone input of a specific side.\n\n**Parameters:**\n- **side: string** The side to get.\n\n**Returns:**\n- boolean Whether the redstone input is on or off."},{"label":"setAnalogOutput","detail":"setAnalogOutput(side: string, value: number): void","parameters":["side: string","value: number"],"documentation":"Set the redstone signal strength for a specific side.\n\n**Parameters:**\n- **side: string** The side to set.\n- **value: number** The signal strength between 0 and 15."},{"label":"setAnalogueOutput","detail":"setAnalogueOutput(side: string, value: number): void","parameters":["side: string","value: number"],"documentation":"Set the redstone signal strength for a specific side.\n\n**Parameters:**\n- **side: string** The side to set.\n- **value: number** The signal strength between 0 and 15."},{"label":"getAnalogOutput","detail":"getAnalogOutput(side: string): number","parameters":["side: string"],"documentation":"Get the redstone output signal strength for a specific side.\n\n**Parameters:**\n- **side: string** The side to get.\n\n**Returns:**\n- number The output signal strength, between 0 and 15."},{"label":"getAnalogueOutput","detail":"getAnalogueOutput(side: string): number","parameters":["side: string"],"documentation":"Get the redstone output signal strength for a specific side.\n\n**Parameters:**\n- **side: string** The side to get.\n\n**Returns:**\n- number The output signal strength, between 0 and 15."},{"label":"getAnalogInput","detail":"getAnalogInput(side: string): number","parameters":["side: string"],"documentation":"Get the redstone input signal strength for a specific side.\n\n**Parameters:**\n- **side: string** The side to get.\n\n**Returns:**\n- number The input signal strength, between 0 and 15."},{"label":"getAnalogueInput","detail":"getAnalogueInput(side: string): number","parameters":["side: string"],"documentation":"Get the redstone input signal strength for a specific side.\n\n**Parameters:**\n- **side: string** The side to get.\n\n**Returns:**\n- number The input signal strength, between 0 and 15."},{"label":"setBundledOutput","detail":"setBundledOutput(side: string, output: number): void","parameters":["side: string","output: number"],"documentation":"Set the bundled cable output for a specific side.\n\n**Parameters:**\n- **side: string** The side to set.\n- **output: number** The colour bitmask to set."},{"label":"getBundledOutput","detail":"getBundledOutput(side: string): number","parameters":["side: string"],"documentation":"Get the bundled cable output for a specific side.\n\n**Parameters:**\n- **side: string** The side to get.\n\n**Returns:**\n- number The bundle cable's output."},{"label":"getBundledInput","detail":"getBundledInput(side: string): number","parameters":["side: string"],"documentation":"Get the bundled cable input for a specific side.\n\n**Parameters:**\n- **side: string** The side to get.\n\n**Returns:**\n- number The bundle cable's input."},{"label":"testBundledInput","detail":"testBundledInput(side: string, mask: number): boolean","parameters":["side: string","mask: number"],"documentation":"Determine if a specific combination of colours are on for the given side.\n\n**Parameters:**\n- **side: string** The side to test.\n- **mask: number** The mask to test.\n\n**Returns:**\n- boolean If the colours are on.\n\n**Usage:**\n\nCheck if colors.white and colors.black are on above the computer.\n\n```\n\nprint(redstone.testBundledInput(\"top\", colors.combine(colors.white, colors.black)))\n\n```"}];
  }
}
