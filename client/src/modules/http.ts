import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class httpModule extends BaseModule {
  constructor() {
    super(`http`, `Make HTTP requests, sending and receiving data to a remote web server.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"get","detail":"get(url: string, headers? { [string] = string } Additional headers to send as part\nof this request., binary?: boolean, request { url = string, headers? = { [string] = string }, binary? = boolean, method? = string, redirect? = boolean, timeout? = number } Options for the request. See http.request for details on how\nthese options behave.): Response | nil | error | string","parameters":["url: string","headers? { [string] = string } Additional headers to send as part\nof this request.","binary?: boolean","request { url = string, headers? = { [string] = string }, binary? = boolean, method? = string, redirect? = boolean, timeout? = number } Options for the request. See http.request for details on how\nthese options behave."],"documentation":"Make a HTTP GET request to the given url.\n\n**Parameters:**\n- **url: string** The url to request\n- headers? { [string] = string } Additional headers to send as part\nof this request.\n- **binary?: boolean** = false Whether the response handle\nshould be opened in binary mode.\n- request { url = string, headers? = { [string] = string }, binary? = boolean, method? = string, redirect? = boolean, timeout? = number } Options for the request. See http.request for details on how\nthese options behave.\n\n**Returns:**\n- Response The resulting http response, which can be read from.\n- nil When the http request failed, such as in the event of a 404\n- error or connection timeout.\n- string A message detailing why the request failed.\n- Response | nil The failing http response, if available.\n\n**Usage:**\n\nMake a request to example.tweaked.cc,\n\n```\n\nand print the returned page.\n\nlocal request = http.get(\"https://example.tweaked.cc\")\n\nprint(request.readAll())\n\n-- => HTTP is working!\n\nrequest.close()\n\n```"},{"label":"post","detail":"post(url: string, body: string, headers? { [string] = string } Additional headers to send as part\nof this request., binary?: boolean, request { url = string, body? = string, headers? = { [string] = string }, binary? = boolean, method? = string, redirect? = boolean, timeout? = number } Options for the request. See http.request for details on how\nthese options behave.): Response | nil | error | string","parameters":["url: string","body: string","headers? { [string] = string } Additional headers to send as part\nof this request.","binary?: boolean","request { url = string, body? = string, headers? = { [string] = string }, binary? = boolean, method? = string, redirect? = boolean, timeout? = number } Options for the request. See http.request for details on how\nthese options behave."],"documentation":"Make a HTTP POST request to the given url.\n\n**Parameters:**\n- **url: string** The url to request\n- **body: string** The body of the POST request.\n- headers? { [string] = string } Additional headers to send as part\nof this request.\n- **binary?: boolean** = false Whether the response handle\nshould be opened in binary mode.\n- request { url = string, body? = string, headers? = { [string] = string }, binary? = boolean, method? = string, redirect? = boolean, timeout? = number } Options for the request. See http.request for details on how\nthese options behave.\n\n**Returns:**\n- Response The resulting http response, which can be read from.\n- nil When the http request failed, such as in the event of a 404\n- error or connection timeout.\n- string A message detailing why the request failed.\n- Response | nil The failing http response, if available."},{"label":"request","detail":"request(url: string, body?: string, headers? { [string] = string } Additional headers to send as part\nof this request., binary?: boolean, request { url = string, body? = string, headers? = { [string] = string }, binary? = boolean, method? = string, redirect? = boolean, timeout? = number } Options for the request.\nThis table form is an expanded version of the previous syntax. All arguments\nfrom above are passed in as fields instead (for instance,\nhttp.request(\"https://example.com\") becomes http.request { url = \"https://example.com\" }).\nThis table also accepts several additional options:\n\nmethod: Which HTTP method to use, for instance \"PATCH\" or \"DELETE\".\nredirect: Whether to follow HTTP redirects. Defaults to true.\ntimeout: The connection timeout, in seconds., method: Which HTTP method to use, for instance \"PATCH\" or \"DELETE\"., redirect: Whether to follow HTTP redirects. Defaults to true., timeout: The connection timeout, in seconds.): void","parameters":["url: string","body?: string","headers? { [string] = string } Additional headers to send as part\nof this request.","binary?: boolean","request { url = string, body? = string, headers? = { [string] = string }, binary? = boolean, method? = string, redirect? = boolean, timeout? = number } Options for the request.\nThis table form is an expanded version of the previous syntax. All arguments\nfrom above are passed in as fields instead (for instance,\nhttp.request(\"https://example.com\") becomes http.request { url = \"https://example.com\" }).\nThis table also accepts several additional options:\n\nmethod: Which HTTP method to use, for instance \"PATCH\" or \"DELETE\".\nredirect: Whether to follow HTTP redirects. Defaults to true.\ntimeout: The connection timeout, in seconds.","method: Which HTTP method to use, for instance \"PATCH\" or \"DELETE\".","redirect: Whether to follow HTTP redirects. Defaults to true.","timeout: The connection timeout, in seconds."],"documentation":"Asynchronously make a HTTP request to the given url.\n\n**Parameters:**\n- **url: string** The url to request\n- **body?: string** An optional string containing the body of the\nrequest. If specified, a POST request will be made instead.\n- headers? { [string] = string } Additional headers to send as part\nof this request.\n- **binary?: boolean** = false Whether the response handle\nshould be opened in binary mode.\n- request { url = string, body? = string, headers? = { [string] = string }, binary? = boolean, method? = string, redirect? = boolean, timeout? = number } Options for the request.\nThis table form is an expanded version of the previous syntax. All arguments\nfrom above are passed in as fields instead (for instance,\nhttp.request(\"https://example.com\") becomes http.request { url = \"https://example.com\" }).\nThis table also accepts several additional options:\n\nmethod: Which HTTP method to use, for instance \"PATCH\" or \"DELETE\".\nredirect: Whether to follow HTTP redirects. Defaults to true.\ntimeout: The connection timeout, in seconds.\n- method: Which HTTP method to use, for instance \"PATCH\" or \"DELETE\".\n- redirect: Whether to follow HTTP redirects. Defaults to true.\n- timeout: The connection timeout, in seconds."},{"label":"checkURLAsync","detail":"checkURLAsync(url: string): true | allowed | false | string | malformed,","parameters":["url: string"],"documentation":"Asynchronously determine whether a URL can be requested.\n\n**Parameters:**\n- **url: string** The URL to check.\n\n**Returns:**\n- true When this url is not invalid. This does not imply that it is\n- allowed - see the comment above.\n- false When this url is invalid.\n- string A reason why this URL is not valid (for instance, if it is\n- malformed, or blocked)."},{"label":"checkURL","detail":"checkURL(url: string): true | false | string | malformed,","parameters":["url: string"],"documentation":"Determine whether a URL can be requested.\n\n**Parameters:**\n- **url: string** The URL to check.\n\n**Returns:**\n- true When this url is valid and can be requested via http.request.\n- false When this url is invalid.\n- string A reason why this URL is not valid (for instance, if it is\n- malformed, or blocked).\n\n**Usage:**\n\nprint(http.checkURL(\"https://example.tweaked.cc/\"))\n\n```\n\n-- => true\n\nprint(http.checkURL(\"http://localhost/\"))\n\n-- => false Domain not permitted\n\nprint(http.checkURL(\"not a url\"))\n\n-- => false URL malformed\n\n```"},{"label":"websocketAsync","detail":"websocketAsync(url: string, headers? { [string] = string } Additional headers to send as part\nof the initial websocket connection., request { url = string, headers? = { [string] = string }, timeout? = number } Options for the websocket.  See http.websocket for details on how\nthese options behave.): void","parameters":["url: string","headers? { [string] = string } Additional headers to send as part\nof the initial websocket connection.","request { url = string, headers? = { [string] = string }, timeout? = number } Options for the websocket.  See http.websocket for details on how\nthese options behave."],"documentation":"Asynchronously open a websocket.\n\n**Parameters:**\n- **url: string** The websocket url to connect to. This should have the\nws:// or wss:// protocol.\n- headers? { [string] = string } Additional headers to send as part\nof the initial websocket connection.\n- request { url = string, headers? = { [string] = string }, timeout? = number } Options for the websocket.  See http.websocket for details on how\nthese options behave."},{"label":"websocket","detail":"websocket(url: string, headers? { [string] = string } Additional headers to send as part\nof the initial websocket connection., request { url = string, headers? = { [string] = string }, timeout? = number } Options for the websocket.\nThis table form is an expanded version of the previous syntax. All arguments\nfrom above are passed in as fields instead (for instance,\nhttp.websocket(\"https://example.com\") becomes http.websocket { url = \"https://example.com\" }).\nThis table also accepts the following additional options:\n\ntimeout: The connection timeout, in seconds., timeout: The connection timeout, in seconds.): Websocket | false | string","parameters":["url: string","headers? { [string] = string } Additional headers to send as part\nof the initial websocket connection.","request { url = string, headers? = { [string] = string }, timeout? = number } Options for the websocket.\nThis table form is an expanded version of the previous syntax. All arguments\nfrom above are passed in as fields instead (for instance,\nhttp.websocket(\"https://example.com\") becomes http.websocket { url = \"https://example.com\" }).\nThis table also accepts the following additional options:\n\ntimeout: The connection timeout, in seconds.","timeout: The connection timeout, in seconds."],"documentation":"Open a websocket.\n\n**Parameters:**\n- **url: string** The websocket url to connect to. This should have the\nws:// or wss:// protocol.\n- headers? { [string] = string } Additional headers to send as part\nof the initial websocket connection.\n- request { url = string, headers? = { [string] = string }, timeout? = number } Options for the websocket.\nThis table form is an expanded version of the previous syntax. All arguments\nfrom above are passed in as fields instead (for instance,\nhttp.websocket(\"https://example.com\") becomes http.websocket { url = \"https://example.com\" }).\nThis table also accepts the following additional options:\n\ntimeout: The connection timeout, in seconds.\n- timeout: The connection timeout, in seconds.\n\n**Returns:**\n- Websocket The websocket connection.\n- false If the websocket connection failed.\n- string An error message describing why the connection failed.\n\n**Usage:**\n\nConnect to an echo websocket and send a message.\n\n```\n\nlocal ws = assert(http.websocket(\"wss://example.tweaked.cc/echo\"))\n\nws.send(\"Hello!\") -- Send a message\n\nprint(ws.receive()) -- And receive the reply\n\nws.close()\n\n```"},{"label":"ty:Response:getResponseCode","detail":"ty:Response:getResponseCode(): number | string","parameters":[],"documentation":"Returns the response code and response message returned by the server.\n\n**Returns:**\n- number The response code (i.e. 200)\n- string The response message (i.e. \"OK\")"},{"label":"ty:Response:getResponseHeaders","detail":"ty:Response:getResponseHeaders(): {","parameters":[],"documentation":"Get a table containing the response's headers, in a format similar to that required by http.request.\nIf multiple headers are sent with the same name, they will be combined with a comma.\n\n**Returns:**\n- { [string] = string } The response's headers.\n\n**Usage:**\n\nMake a request to example.tweaked.cc, and print the\n\n```\n\nreturned headers.\n\nlocal request = http.get(\"https://example.tweaked.cc\")\n\nprint(textutils.serialize(request.getResponseHeaders()))\n\n-- => {\n\n--  [ \"Content-Type\" ] = \"text/plain; charset=utf8\",\n\n--  [ \"content-length\" ] = 17,\n\n--  ...\n\n-- }\n\nrequest.close()\n\n```"},{"label":"ty:Websocket:receive","detail":"ty:Websocket:receive(timeout?: number): string | boolean | nil","parameters":["timeout?: number"],"documentation":"Wait for a message from the server.\n\n**Parameters:**\n- **timeout?: number** The number of seconds to wait if no message is received.\n\n**Returns:**\n- string The received message.\n- boolean If this was a binary message.\n- nil If the websocket was closed while waiting, or if we timed out."},{"label":"ty:Websocket:send","detail":"ty:Websocket:send(message: string, binary?: boolean): void","parameters":["message: string","binary?: boolean"],"documentation":"Send a websocket message to the connected server.\n\n**Parameters:**\n- **message: string** The message to send.\n- **binary?: boolean** Whether this message should be treated as a"},{"label":"ty:Websocket:close","detail":"ty:Websocket:close(): void","parameters":[],"documentation":"Close this websocket. This will terminate the connection, meaning messages can no longer be sent or received\nalong it."}];
  }
}
