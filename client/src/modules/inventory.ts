import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class inventoryModule extends BaseModule {
  constructor() {
    super(`inventory`, `Methods for interacting with inventories.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"size","detail":"size(): number","parameters":[],"documentation":"Get the size of this inventory.\n\n**Returns:**\n- number The number of slots in this inventory."},{"label":"list","detail":"list(): {","parameters":[],"documentation":"List all items in this inventory. This returns a table, with an entry for each slot.\n\n**Returns:**\n- { table | nil... } All items in this inventory.\n\n**Usage:**\n\nFind an adjacent chest and print all items in it.\n\n```\n\nlocal chest = peripheral.find(\"minecraft:chest\")\n\nfor slot, item in pairs(chest.list()) do\n\n  print((\"%d x %s in slot %d\"):format(item.count, item.name, slot))\n\nend\n\n```"},{"label":"getItemDetail","detail":"getItemDetail(slot: number): table","parameters":["slot: number"],"documentation":"Get detailed information about an item.\n\n**Parameters:**\n- **slot: number** The slot to get information about.\n\n**Returns:**\n- table Information about the item in this slot, or nil if not present.\n\n**Usage:**\n\nPrint some information about the first in a chest.\n\n```\n\nlocal chest = peripheral.find(\"minecraft:chest\")\n\nlocal item = chest.getItemDetail(1)\n\nif not item then print(\"No item\") return end\n\n\n\nprint((\"%s (%s)\"):format(item.displayName, item.name))\n\nprint((\"Count: %d/%d\"):format(item.count, item.maxCount))\n\n\n\nif item.damage then\n\n  print((\"Damage: %d/%d\"):format(item.damage, item.maxDamage))\n\nend\n\n```"},{"label":"getItemLimit","detail":"getItemLimit(slot: number): number","parameters":["slot: number"],"documentation":"Get the maximum number of items which can be stored in this slot.\n\n**Parameters:**\n- **slot: number** The slot\n\n**Returns:**\n- number The maximum number of items in this slot.\n\n**Usage:**\n\nCount the maximum number of items an adjacent chest can hold.\n\n```\n\nlocal chest = peripheral.find(\"minecraft:chest\")\n\nlocal total = 0\n\nfor i = 1, chest.size() do\n\n  total = total + chest.getItemLimit(i)\n\nend\n\nprint(total)\n\n```"},{"label":"pushItems","detail":"pushItems(toName: string, fromSlot: number, limit?: number, toSlot?: number): number","parameters":["toName: string","fromSlot: number","limit?: number","toSlot?: number"],"documentation":"Push items from one inventory to another connected one.\n\n**Parameters:**\n- **toName: string** The name of the peripheral/inventory to push to. This is the string given to peripheral.wrap,\nand displayed by the wired modem.\n- **fromSlot: number** The slot in the current inventory to move items to.\n- **limit?: number** The maximum number of items to move. Defaults to the current stack limit.\n- **toSlot?: number** The slot in the target inventory to move to. If not given, the item will be inserted into any slot.\n\n**Returns:**\n- number The number of transferred items.\n\n**Usage:**\n\nWrap two chests, and push an item from one to another.\n\n```\n\nlocal chest_a = peripheral.wrap(\"minecraft:chest_0\")\n\nlocal chest_b = peripheral.wrap(\"minecraft:chest_1\")\n\n\n\nchest_a.pushItems(peripheral.getName(chest_b), 1)\n\n```"},{"label":"pullItems","detail":"pullItems(fromName: string, fromSlot: number, limit?: number, toSlot?: number): number","parameters":["fromName: string","fromSlot: number","limit?: number","toSlot?: number"],"documentation":"Pull items from a connected inventory into this one.\n\n**Parameters:**\n- **fromName: string** The name of the peripheral/inventory to pull from. This is the string given to peripheral.wrap,\nand displayed by the wired modem.\n- **fromSlot: number** The slot in the source inventory to move items from.\n- **limit?: number** The maximum number of items to move. Defaults to the current stack limit.\n- **toSlot?: number** The slot in current inventory to move to. If not given, the item will be inserted into any slot.\n\n**Returns:**\n- number The number of transferred items.\n\n**Usage:**\n\nWrap two chests, and push an item from one to another.\n\n```\n\nlocal chest_a = peripheral.wrap(\"minecraft:chest_0\")\n\nlocal chest_b = peripheral.wrap(\"minecraft:chest_1\")\n\n\n\nchest_a.pullItems(peripheral.getName(chest_b), 1)\n\n```"}];
  }
}
