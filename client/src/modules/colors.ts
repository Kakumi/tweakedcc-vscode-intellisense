import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class colorsModule extends BaseModule {
  constructor() {
    super(`colors`, `Constants and functions for colour values, suitable for working withterm and redstone.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"white","detail":"white(): void","parameters":[],"documentation":"White: Written as 0 in paint files and term.blit, has a default\nterminal colour of #F0F0F0."},{"label":"orange","detail":"orange(): void","parameters":[],"documentation":"Orange: Written as 1 in paint files and term.blit, has a\ndefault terminal colour of #F2B233."},{"label":"magenta","detail":"magenta(): void","parameters":[],"documentation":"Magenta: Written as 2 in paint files and term.blit, has a\ndefault terminal colour of #E57FD8."},{"label":"lightBlue","detail":"lightBlue(): void","parameters":[],"documentation":"Light blue: Written as 3 in paint files and term.blit, has a\ndefault terminal colour of #99B2F2."},{"label":"yellow","detail":"yellow(): void","parameters":[],"documentation":"Yellow: Written as 4 in paint files and term.blit, has a\ndefault terminal colour of #DEDE6C."},{"label":"lime","detail":"lime(): void","parameters":[],"documentation":"Lime: Written as 5 in paint files and term.blit, has a default\nterminal colour of #7FCC19."},{"label":"pink","detail":"pink(): void","parameters":[],"documentation":"Pink: Written as 6 in paint files and term.blit, has a default\nterminal colour of #F2B2CC."},{"label":"gray","detail":"gray(): void","parameters":[],"documentation":"Gray: Written as 7 in paint files and term.blit, has a default\nterminal colour of #4C4C4C."},{"label":"lightGray","detail":"lightGray(): void","parameters":[],"documentation":"Light gray: Written as 8 in paint files and term.blit, has a\ndefault terminal colour of #999999."},{"label":"cyan","detail":"cyan(): void","parameters":[],"documentation":"Cyan: Written as 9 in paint files and term.blit, has a default\nterminal colour of #4C99B2."},{"label":"purple","detail":"purple(): void","parameters":[],"documentation":"Purple: Written as a in paint files and term.blit, has a\ndefault terminal colour of #B266E5."},{"label":"blue","detail":"blue(): void","parameters":[],"documentation":"Blue: Written as b in paint files and term.blit, has a default\nterminal colour of #3366CC."},{"label":"brown","detail":"brown(): void","parameters":[],"documentation":"Brown: Written as c in paint files and term.blit, has a default\nterminal colour of #7F664C."},{"label":"green","detail":"green(): void","parameters":[],"documentation":"Green: Written as d in paint files and term.blit, has a default\nterminal colour of #57A64E."},{"label":"red","detail":"red(): void","parameters":[],"documentation":"Red: Written as e in paint files and term.blit, has a default\nterminal colour of #CC4C4C."},{"label":"black","detail":"black(): void","parameters":[],"documentation":"Black: Written as f in paint files and term.blit, has a default\nterminal colour of #111111."},{"label":"combine","detail":"combine(... number The colors to combine.): number","parameters":["... number The colors to combine."],"documentation":"Combines a set of colors (or sets of colors) into a larger set. Useful for\nBundled Cables.\n\n**Parameters:**\n- ... number The colors to combine.\n\n**Returns:**\n- number The union of the color sets given in ...\n\n**Usage:**\n\ncolors.combine(colors.white, colors.magenta, colours.lightBlue)\n\n```\n\n-- => 13\n\n```"},{"label":"subtract","detail":"subtract(colors: number, ... number The colors to subtract.): number","parameters":["colors: number","... number The colors to subtract."],"documentation":"Removes one or more colors (or sets of colors) from an initial set. Useful\nfor Bundled Cables.\n\n**Parameters:**\n- **colors: number** The color from which to subtract.\n- ... number The colors to subtract.\n\n**Returns:**\n- number The resulting color.\n\n**Usage:**\n\ncolours.subtract(colours.lime, colours.orange, colours.white)\n\n```\n\n-- => 32\n\n```"},{"label":"test","detail":"test(colors: number, color: number): boolean","parameters":["colors: number","color: number"],"documentation":"Tests whether color is contained within colors. Useful for Bundled\nCables.\n\n**Parameters:**\n- **colors: number** A color, or color set\n- **color: number** A color or set of colors that colors should contain.\n\n**Returns:**\n- boolean If colors contains all colors within color.\n\n**Usage:**\n\ncolors.test(colors.combine(colors.white, colors.magenta, colours.lightBlue), colors.lightBlue)\n\n```\n\n-- => true\n\n```"},{"label":"packRGB","detail":"packRGB(r: number, g: number, b: number): number","parameters":["r: number","g: number","b: number"],"documentation":"Combine a three-colour RGB value into one hexadecimal representation.\n\n**Parameters:**\n- **r: number** The red channel, should be between 0 and 1.\n- **g: number** The green channel, should be between 0 and 1.\n- **b: number** The blue channel, should be between 0 and 1.\n\n**Returns:**\n- number The combined hexadecimal colour.\n\n**Usage:**\n\ncolors.packRGB(0.7, 0.2, 0.6)\n\n```\n\n-- => 0xb23399\n\n```"},{"label":"unpackRGB","detail":"unpackRGB(rgb: number): number","parameters":["rgb: number"],"documentation":"Separate a hexadecimal RGB colour into its three constituent channels.\n\n**Parameters:**\n- **rgb: number** The combined hexadecimal colour.\n\n**Returns:**\n- number The red channel, will be between 0 and 1.\n- number The green channel, will be between 0 and 1.\n- number The blue channel, will be between 0 and 1.\n\n**Usage:**\n\ncolors.unpackRGB(0xb23399)\n\n```\n\n-- => 0.7, 0.2, 0.6\n\n```"},{"label":"rgb8","detail":"rgb8(r: number, g: number, b: number, rgb: number): number","parameters":["r: number","g: number","b: number","rgb: number"],"documentation":"Use packRGB or unpackRGB directly.\n\n**Parameters:**\n- **r: number** The red channel, as an argument to colors.packRGB.\n- **g: number** The green channel, as an argument to colors.packRGB.\n- **b: number** The blue channel, as an argument to colors.packRGB.\n- **rgb: number** The combined hexadecimal color, as an argument to colors.unpackRGB.\n\n**Returns:**\n- number The combined hexadecimal colour, as returned by colors.packRGB.\n- number The red channel, as returned by colors.unpackRGB\n- number The green channel, as returned by colors.unpackRGB\n- number The blue channel, as returned by colors.unpackRGB\n\n**Usage:**\n\ncolors.rgb8(0xb23399)\n\n```\n\n-- => 0.7, 0.2, 0.6\n\ncolors.rgb8(0.7, 0.2, 0.6)\n\n-- => 0xb23399\n\n```"},{"label":"toBlit","detail":"toBlit(color: number): string","parameters":["color: number"],"documentation":"Converts the given color to a paint/blit hex character (0-9a-f).\n\n**Parameters:**\n- **color: number** The color to convert.\n\n**Returns:**\n- string The blit hex code of the color.\n\n**Usage:**\n\ncolors.toBlit(colors.red)\n\n```\n\n-- => \"c\"\n\n```"},{"label":"fromBlit","detail":"fromBlit(hex: string): number","parameters":["hex: string"],"documentation":"Converts the given paint/blit hex character (0-9a-f) to a color.\n\n**Parameters:**\n- **hex: string** The paint/blit hex character to convert\n\n**Returns:**\n- number The color\n\n**Usage:**\n\ncolors.fromBlit(\"e\")\n\n```\n\n-- => 16384\n\n```"}];
  }
}
