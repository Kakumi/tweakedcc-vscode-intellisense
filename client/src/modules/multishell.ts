import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class multishellModule extends BaseModule {
  constructor() {
    super(`multishell`, `Multishell allows multiple programs to be run at the same time.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"getFocus","detail":"getFocus(): number","parameters":[],"documentation":"Get the currently visible process. This will be the one selected on\nthe tab bar.\n\n**Returns:**\n- number The currently visible process's index."},{"label":"setFocus","detail":"setFocus(n: number): boolean | return","parameters":["n: number"],"documentation":"Change the currently visible process.\n\n**Parameters:**\n- **n: number** The process index to switch to.\n\n**Returns:**\n- boolean If the process was changed successfully. This will\n- return false if there is no process with this id."},{"label":"getTitle","detail":"getTitle(n: number): string | process","parameters":["n: number"],"documentation":"Get the title of the given tab.\n\n**Parameters:**\n- **n: number** The process index.\n\n**Returns:**\n- string | nil The current process title, or nil if the\n- process doesn't exist."},{"label":"setTitle","detail":"setTitle(n: number, title: string): void","parameters":["n: number","title: string"],"documentation":"Set the title of the given process.\n\n**Parameters:**\n- **n: number** The process index.\n- **title: string** The new process title.\n\n**Usage:**\n\nChange the title of the current process\n\n```\n\nmultishell.setTitle(multishell.getCurrent(), \"Hello\")\n\n```"},{"label":"getCurrent","detail":"getCurrent(): number","parameters":[],"documentation":"Get the index of the currently running process.\n\n**Returns:**\n- number The currently running process."},{"label":"launch","detail":"launch(tProgramEnv: table, sProgramPath: string, ...  Additional arguments to pass to the program.): number","parameters":["tProgramEnv: table","sProgramPath: string","...  Additional arguments to pass to the program."],"documentation":"Start a new process, with the given environment, program and arguments.\n\n**Parameters:**\n- **tProgramEnv: table** The environment to load the path under.\n- **sProgramPath: string** The path to the program to run.\n- ...  Additional arguments to pass to the program.\n\n**Returns:**\n- number The index of the created process.\n\n**Usage:**\n\nRun the \"hello\" program, and set its title to \"Hello!\"\n\n```\n\nlocal id = multishell.launch({}, \"/rom/programs/fun/hello.lua\")\n\nmultishell.setTitle(id, \"Hello!\")\n\n```"},{"label":"getCount","detail":"getCount(): number","parameters":[],"documentation":"Get the number of processes within this multishell.\n\n**Returns:**\n- number The number of processes."}];
  }
}
