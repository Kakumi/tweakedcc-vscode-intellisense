import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class modemModule extends BaseModule {
  constructor() {
    super(`modem`, `Modems allow you to send messages between computers over long distances.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"open","detail":"open(channel: number): void","parameters":["channel: number"],"documentation":"Open a channel on a modem. A channel must be open in order to receive messages. Modems can have up to 128\nchannels open at one time.\n\n**Parameters:**\n- **channel: number** The channel to open. This must be a number between 0 and 65535."},{"label":"isOpen","detail":"isOpen(channel: number): boolean","parameters":["channel: number"],"documentation":"Check if a channel is open.\n\n**Parameters:**\n- **channel: number** The channel to check.\n\n**Returns:**\n- boolean Whether the channel is open."},{"label":"close","detail":"close(channel: number): void","parameters":["channel: number"],"documentation":"Close an open channel, meaning it will no longer receive messages.\n\n**Parameters:**\n- **channel: number** The channel to close."},{"label":"closeAll","detail":"closeAll(): void","parameters":[],"documentation":"Close all open channels."},{"label":"transmit","detail":"transmit(channel: number, replyChannel: number, payload: any): void","parameters":["channel: number","replyChannel: number","payload: any"],"documentation":"Sends a modem message on a certain channel. Modems listening on the channel will queue a modem_message\nevent on adjacent computers.\n\n**Parameters:**\n- **channel: number** The channel to send messages on.\n- **replyChannel: number** The channel that responses to this message should be sent on. This can be the same as\nchannel or entirely different. The channel must have been opened on\nthe sending computer in order to receive the replies.\n- **payload: any** The object to send. This can be any primitive type (boolean, number, string) as well as\ntables. Other types (like functions), as well as metatables, will not be transmitted.\n\n**Usage:**\n\nWrap a modem and a message on channel 15, requesting a response on channel 43.\n\n```\n\nlocal modem = peripheral.find(\"modem\") or error(\"No modem attached\", 0)\n\nmodem.transmit(15, 43, \"Hello, world!\")\n\n```"},{"label":"isWireless","detail":"isWireless(): boolean","parameters":[],"documentation":"Determine if this is a wired or wireless modem.\n\n**Returns:**\n- boolean true if this is a wireless modem."},{"label":"getNamesRemote","detail":"getNamesRemote(): {","parameters":[],"documentation":"List all remote peripherals on the wired network.\n\n**Returns:**\n- { string... } Remote peripheral names on the network."},{"label":"isPresentRemote","detail":"isPresentRemote(name: string): boolean","parameters":["name: string"],"documentation":"Determine if a peripheral is available on this wired network.\n\n**Parameters:**\n- **name: string** The peripheral's name.\n\n**Returns:**\n- boolean boolean If a peripheral is present with the given name."},{"label":"getTypeRemote","detail":"getTypeRemote(name: string): string","parameters":["name: string"],"documentation":"Get the type of a peripheral is available on this wired network.\n\n**Parameters:**\n- **name: string** The peripheral's name.\n\n**Returns:**\n- string | nil The peripheral's type, or nil if it is not present."},{"label":"hasTypeRemote","detail":"hasTypeRemote(name: string, type: string): boolean","parameters":["name: string","type: string"],"documentation":"Check a peripheral is of a particular type.\n\n**Parameters:**\n- **name: string** The peripheral's name.\n- **type: string** The type to check.\n\n**Returns:**\n- boolean | nil If a peripheral has a particular type, or nil if it is not present."},{"label":"getMethodsRemote","detail":"getMethodsRemote(name: string): {","parameters":["name: string"],"documentation":"Get all available methods for the remote peripheral with the given name.\n\n**Parameters:**\n- **name: string** The peripheral's name.\n\n**Returns:**\n- { string... } | nil A list of methods provided by this peripheral, or nil if it is not present."},{"label":"callRemote","detail":"callRemote(remoteName: string, method: string, ...  Additional arguments to pass to the method): string","parameters":["remoteName: string","method: string","...  Additional arguments to pass to the method"],"documentation":"Call a method on a peripheral on this wired network.\n\n**Parameters:**\n- **remoteName: string** The name of the peripheral to invoke the method on.\n- **method: string** The name of the method\n- ...  Additional arguments to pass to the method\n\n**Returns:**\n- string The return values of the peripheral method."},{"label":"getNameLocal","detail":"getNameLocal(): string","parameters":[],"documentation":"Returns the network name of the current computer, if the modem is on. This\nmay be used by other computers on the network to wrap this computer as a\nperipheral.\n\n**Returns:**\n- string | nil The current computer's name on the wired network."}];
  }
}
