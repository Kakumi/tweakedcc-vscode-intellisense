import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class _GModule extends BaseModule {
  constructor() {
    super(`_G`, `Functions in the global environment, defined in bios.lua. This does notinclude standard Lua functions.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"sleep","detail":"sleep(time: number): void","parameters":["time: number"],"documentation":"Pauses execution for the specified number of seconds.\n\n**Parameters:**\n- **time: number** The number of seconds to sleep for, rounded up to the\nnearest multiple of 0.05.\n\n**Usage:**\n\nSleep for three seconds.\n\n```\n\nprint(\"Sleeping for three seconds\")\n\nsleep(3)\n\nprint(\"Done!\")\n\n```"},{"label":"write","detail":"write(text: string): number","parameters":["text: string"],"documentation":"Writes a line of text to the screen without a newline at the end, wrapping\ntext if necessary.\n\n**Parameters:**\n- **text: string** The text to write to the string\n\n**Returns:**\n- number The number of lines written\n\n**Usage:**\n\nwrite(\"Hello, world\")"},{"label":"print","detail":"print(...  The values to print on the screen): number","parameters":["...  The values to print on the screen"],"documentation":"Prints the specified values to the screen separated by spaces, wrapping if\nnecessary. After printing, the cursor is moved to the next line.\n\n**Parameters:**\n- ...  The values to print on the screen\n\n**Returns:**\n- number The number of lines written\n\n**Usage:**\n\nprint(\"Hello, world!\")"},{"label":"printError","detail":"printError(...  The values to print on the screen): void","parameters":["...  The values to print on the screen"],"documentation":"Prints the specified values to the screen in red, separated by spaces,\nwrapping if necessary. After printing, the cursor is moved to the next line.\n\n**Parameters:**\n- ...  The values to print on the screen\n\n**Usage:**\n\nprintError(\"Something went wrong!\")"},{"label":"read","detail":"read(replaceChar?: string, history?: table, completeFn?: function, default?: string): string","parameters":["replaceChar?: string","history?: table","completeFn?: function","default?: string"],"documentation":"Reads user input from the terminal. This automatically handles arrow keys,\npasting, character replacement, history scrollback, auto-completion, and\ndefault values.\n\n**Parameters:**\n- **replaceChar?: string** A character to replace each typed character with.\nThis can be used for hiding passwords, for example.\n- **history?: table** A table holding history items that can be scrolled\nback to with the up/down arrow keys. The oldest item is at index 1, while the\nnewest item is at the highest index.\n- **completeFn?: function**(partial: string):{ string... } | nil A function\nto be used for completion. This function should take the partial text typed so\nfar, and returns a list of possible completion options.\n- **default?: string** Default text which should already be entered into\nthe prompt.\n\n**Returns:**\n- string The text typed in.\n\n**Usage:**\n\nRead a string and echo it back to the user\n\n```\n\nwrite(\"> \")\n\nlocal msg = read()\n\nprint(msg)\n\nPrompt a user for a password.\n\nwhile true do\n\n  write(\"Password> \")\n\n  local pwd = read(\"*\")\n\n  if pwd == \"let me in\" then break end\n\n  print(\"Incorrect password, try again.\")\n\nend\n\nprint(\"Logged in!\")\n\nA complete example with completion, history and a default value.\n\nlocal completion = require \"cc.completion\"\n\nlocal history = { \"potato\", \"orange\", \"apple\" }\n\nlocal choices = { \"apple\", \"orange\", \"banana\", \"strawberry\" }\n\nwrite(\"> \")\n\nlocal msg = read(nil, history, function(text) return completion.choice(text, choices) end, \"app\")\n\nprint(msg)\n\n```"},{"label":"_HOST","detail":"_HOST(): void","parameters":[],"documentation":"Stores the current ComputerCraft and Minecraft versions.\n\n**Usage:**\n\nPrint the current computer's environment.\n\n```\n\nprint(_HOST)\n\n```"},{"label":"_CC_DEFAULT_SETTINGS","detail":"_CC_DEFAULT_SETTINGS(): void","parameters":[],"documentation":"The default computer settings as defined in the ComputerCraft\nconfiguration.\n\n**Usage:**\n\n_CC_DEFAULT_SETTINGS"}];
  }
}
