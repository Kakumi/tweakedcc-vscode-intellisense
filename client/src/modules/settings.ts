import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class settingsModule extends BaseModule {
  constructor() {
    super(`settings`, `Read and write configuration options for CraftOS and your programs.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"define","detail":"define(name: string, options? { description? = string, default? = any, type? = string } Options for this setting. This table accepts the following fields:\n\ndescription: A description which may be printed when running the set program.\ndefault: A default value, which is returned by settings.get if the\nsetting has not been changed.\ntype: Require values to be of this type. Setting the value to another type\nwill error., description: A description which may be printed when running the set program., default: A default value, which is returned by settings.get if the\nsetting has not been changed., type: Require values to be of this type. Setting the value to another type\nwill error.): void","parameters":["name: string","options? { description? = string, default? = any, type? = string } Options for this setting. This table accepts the following fields:\n\ndescription: A description which may be printed when running the set program.\ndefault: A default value, which is returned by settings.get if the\nsetting has not been changed.\ntype: Require values to be of this type. Setting the value to another type\nwill error.","description: A description which may be printed when running the set program.","default: A default value, which is returned by settings.get if the\nsetting has not been changed.","type: Require values to be of this type. Setting the value to another type\nwill error."],"documentation":"Define a new setting, optional specifying various properties about it.\n\n**Parameters:**\n- **name: string** The name of this option\n- options? { description? = string, default? = any, type? = string } Options for this setting. This table accepts the following fields:\n\ndescription: A description which may be printed when running the set program.\ndefault: A default value, which is returned by settings.get if the\nsetting has not been changed.\ntype: Require values to be of this type. Setting the value to another type\nwill error.\n- description: A description which may be printed when running the set program.\n- default: A default value, which is returned by settings.get if the\nsetting has not been changed.\n- type: Require values to be of this type. Setting the value to another type\nwill error."},{"label":"undefine","detail":"undefine(name: string): void","parameters":["name: string"],"documentation":"Remove a definition of a setting.\n\n**Parameters:**\n- **name: string** The name of this option"},{"label":"set","detail":"set(name: string, value  The setting's value. This cannot be nil, and must be\nserialisable by textutils.serialize.): void","parameters":["name: string","value  The setting's value. This cannot be nil, and must be\nserialisable by textutils.serialize."],"documentation":"Set the value of a setting.\n\n**Parameters:**\n- **name: string** The name of the setting to set\n- value  The setting's value. This cannot be nil, and must be\nserialisable by textutils.serialize."},{"label":"get","detail":"get(name: string, default?  The value to use should there be pre-existing value for\nthis setting. If not given, it will use the setting's default value if given,\nor nil otherwise.): The","parameters":["name: string","default?  The value to use should there be pre-existing value for\nthis setting. If not given, it will use the setting's default value if given,\nor nil otherwise."],"documentation":"Get the value of a setting.\n\n**Parameters:**\n- **name: string** The name of the setting to get.\n- default?  The value to use should there be pre-existing value for\nthis setting. If not given, it will use the setting's default value if given,\nor nil otherwise.\n\n**Returns:**\n- The setting's, or the default if the setting has not been changed."},{"label":"getDetails","detail":"getDetails(name: string): { | as","parameters":["name: string"],"documentation":"Get details about a specific setting.\n\n**Parameters:**\n- **name: string** The name of the setting to get.\n\n**Returns:**\n- { description? = string, default? = any, type? = string, value? = any } Information about this setting. This includes all information from settings.define,\n- as well as this setting's value."},{"label":"unset","detail":"unset(name: string): void","parameters":["name: string"],"documentation":"Remove the value of a setting, setting it to the default.\n\n**Parameters:**\n- **name: string** The name of the setting to unset."},{"label":"clear","detail":"clear(): void","parameters":[],"documentation":"Resets the value of all settings. Equivalent to calling settings.unset\non every setting."},{"label":"getNames","detail":"getNames(): { | settings.","parameters":[],"documentation":"Get the names of all currently defined settings.\n\n**Returns:**\n- { string } An alphabetically sorted list of all currently-defined\n- settings."},{"label":"load","detail":"load(path?: string): boolean | file. | corrupted.","parameters":["path?: string"],"documentation":"Load settings from the given file.\n\n**Parameters:**\n- **path?: string** = \".settings\" The file to load from.\n\n**Returns:**\n- boolean Whether settings were successfully read from this\n- file. Reasons for failure may include the file not existing or being\n- corrupted."},{"label":"save","detail":"save(path?: string): boolean","parameters":["path?: string"],"documentation":"Save settings to the given file.\n\n**Parameters:**\n- **path?: string** = \".settings\" The path to save settings to.\n\n**Returns:**\n- boolean If the settings were successfully saved."}];
  }
}
