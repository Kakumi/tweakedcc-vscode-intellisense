import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class vectorModule extends BaseModule {
  constructor() {
    super(`vector`, `A basic 3D vector type and some common vector operations. This may be usefulwhen working with coordinates in Minecraft's world (such as those from the
gps API).`);
  }

  protected getMethods(): Method[] {
    return [{"label":"new","detail":"new(x: number, y: number, z: number): Vector","parameters":["x: number","y: number","z: number"],"documentation":"Construct a new Vector with the given coordinates.\n\n**Parameters:**\n- **x: number** The X coordinate or direction of the vector.\n- **y: number** The Y coordinate or direction of the vector.\n- **z: number** The Z coordinate or direction of the vector.\n\n**Returns:**\n- Vector The constructed vector."},{"label":"ty:Vector:add","detail":"ty:Vector:add(o: Vector): Vector","parameters":["o: Vector"],"documentation":"Adds two vectors together.\n\n**Parameters:**\n- **o: Vector** The second vector to add.\n\n**Returns:**\n- Vector The resulting vector\n\n**Usage:**\n\nv1:add(v2)\n\n```\n\nv1 + v2\n\n```"},{"label":"ty:Vector:sub","detail":"ty:Vector:sub(o: Vector): Vector","parameters":["o: Vector"],"documentation":"Subtracts one vector from another.\n\n**Parameters:**\n- **o: Vector** The vector to subtract.\n\n**Returns:**\n- Vector The resulting vector\n\n**Usage:**\n\nv1:sub(v2)\n\n```\n\nv1 - v2\n\n```"},{"label":"ty:Vector:mul","detail":"ty:Vector:mul(factor: number): Vector","parameters":["factor: number"],"documentation":"Multiplies a vector by a scalar value.\n\n**Parameters:**\n- **factor: number** The scalar value to multiply with.\n\n**Returns:**\n- Vector A vector with value (x * m, y * m, z * m).\n\n**Usage:**\n\nvector.new(1, 2, 3):mul(3)\n\n```\n\nvector.new(1, 2, 3) * 3\n\n```"},{"label":"ty:Vector:div","detail":"ty:Vector:div(factor: number): Vector","parameters":["factor: number"],"documentation":"Divides a vector by a scalar value.\n\n**Parameters:**\n- **factor: number** The scalar value to divide by.\n\n**Returns:**\n- Vector A vector with value (x / m, y / m, z / m).\n\n**Usage:**\n\nvector.new(1, 2, 3):div(3)\n\n```\n\nvector.new(1, 2, 3) / 3\n\n```"},{"label":"ty:Vector:unm","detail":"ty:Vector:unm(): Vector","parameters":[],"documentation":"Negate a vector\n\n**Returns:**\n- Vector The negated vector.\n\n**Usage:**\n\n-vector.new(1, 2, 3)"},{"label":"ty:Vector:dot","detail":"ty:Vector:dot(o: Vector): number","parameters":["o: Vector"],"documentation":"Compute the dot product of two vectors\n\n**Parameters:**\n- **o: Vector** The second vector to compute the dot product of.\n\n**Returns:**\n- number The dot product of self and o.\n\n**Usage:**\n\nv1:dot(v2)"},{"label":"ty:Vector:cross","detail":"ty:Vector:cross(o: Vector): Vector","parameters":["o: Vector"],"documentation":"Compute the cross product of two vectors\n\n**Parameters:**\n- **o: Vector** The second vector to compute the cross product of.\n\n**Returns:**\n- Vector The cross product of self and o.\n\n**Usage:**\n\nv1:cross(v2)"},{"label":"ty:Vector:length","detail":"ty:Vector:length(): number","parameters":[],"documentation":"Get the length (also referred to as magnitude) of this vector.\n\n**Returns:**\n- number The length of this vector."},{"label":"ty:Vector:normalize","detail":"ty:Vector:normalize(): Vector","parameters":[],"documentation":"Divide this vector by its length, producing with the same direction, but\nof length 1.\n\n**Returns:**\n- Vector The normalised vector\n\n**Usage:**\n\nv:normalize()"},{"label":"ty:Vector:round","detail":"ty:Vector:round(tolerance?: number): Vector","parameters":["tolerance?: number"],"documentation":"Construct a vector with each dimension rounded to the nearest value.\n\n**Parameters:**\n- **tolerance?: number** The tolerance that we should round to,\ndefaulting to 1. For instance, a tolerance of 0.5 will round to the\nnearest 0.5.\n\n**Returns:**\n- Vector The rounded vector."},{"label":"ty:Vector:tostring","detail":"ty:Vector:tostring(): string","parameters":[],"documentation":"Convert this vector into a string, for pretty printing.\n\n**Returns:**\n- string This vector's string representation.\n\n**Usage:**\n\nv:tostring()\n\n```\n\ntostring(v)\n\n```"},{"label":"ty:Vector:equals","detail":"ty:Vector:equals(other: Vector): boolean","parameters":["other: Vector"],"documentation":"Check for equality between two vectors.\n\n**Parameters:**\n- **other: Vector** The second vector to compare to.\n\n**Returns:**\n- boolean Whether or not the vectors are equal."}];
  }
}
