import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class monitorModule extends BaseModule {
  constructor() {
    super(`monitor`, `Monitors are a block which act as a terminal, displaying information on one side. This allows them to be read andinteracted with in-world without opening a GUI.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"setTextScale","detail":"setTextScale(scale: number): void","parameters":["scale: number"],"documentation":"Set the scale of this monitor. A larger scale will result in the monitor having a lower resolution, but display\ntext much larger.\n\n**Parameters:**\n- **scale: number** The monitor's scale. This must be a multiple of 0.5 between 0.5 and 5."},{"label":"getTextScale","detail":"getTextScale(): number","parameters":[],"documentation":"Get the monitor's current text scale.\n\n**Returns:**\n- number The monitor's current scale."},{"label":"write","detail":"write(text: string): void","parameters":["text: string"],"documentation":"Write text at the current cursor position, moving the cursor to the end of the text.\n\n**Parameters:**\n- **text: string** The text to write."},{"label":"scroll","detail":"scroll(y: number): void","parameters":["y: number"],"documentation":"Move all positions up (or down) by y pixels.\n\n**Parameters:**\n- **y: number** The number of lines to move up by. This may be a negative number."},{"label":"getCursorPos","detail":"getCursorPos(): number","parameters":[],"documentation":"Get the position of the cursor.\n\n**Returns:**\n- number The x position of the cursor.\n- number The y position of the cursor."},{"label":"setCursorPos","detail":"setCursorPos(x: number, y: number): void","parameters":["x: number","y: number"],"documentation":"Set the position of the cursor. terminal writes will begin from this position.\n\n**Parameters:**\n- **x: number** The new x position of the cursor.\n- **y: number** The new y position of the cursor."},{"label":"getCursorBlink","detail":"getCursorBlink(): boolean","parameters":[],"documentation":"Checks if the cursor is currently blinking.\n\n**Returns:**\n- boolean If the cursor is blinking."},{"label":"setCursorBlink","detail":"setCursorBlink(blink: boolean): void","parameters":["blink: boolean"],"documentation":"Sets whether the cursor should be visible (and blinking) at the current cursor position.\n\n**Parameters:**\n- **blink: boolean** Whether the cursor should blink."},{"label":"getSize","detail":"getSize(): number","parameters":[],"documentation":"Get the size of the terminal.\n\n**Returns:**\n- number The terminal's width.\n- number The terminal's height."},{"label":"clear","detail":"clear(): void","parameters":[],"documentation":"Clears the terminal, filling it with the current background colour."},{"label":"clearLine","detail":"clearLine(): void","parameters":[],"documentation":"Clears the line the cursor is currently on, filling it with the current background\ncolour."},{"label":"getTextColour","detail":"getTextColour(): number","parameters":[],"documentation":"Return the colour that new text will be written as.\n\n**Returns:**\n- number The current text colour."},{"label":"getTextColor","detail":"getTextColor(): number","parameters":[],"documentation":"Return the colour that new text will be written as.\n\n**Returns:**\n- number The current text colour."},{"label":"setTextColour","detail":"setTextColour(colour: number): void","parameters":["colour: number"],"documentation":"Set the colour that new text will be written as.\n\n**Parameters:**\n- **colour: number** The new text colour."},{"label":"setTextColor","detail":"setTextColor(colour: number): void","parameters":["colour: number"],"documentation":"Set the colour that new text will be written as.\n\n**Parameters:**\n- **colour: number** The new text colour."},{"label":"getBackgroundColour","detail":"getBackgroundColour(): number","parameters":[],"documentation":"Return the current background colour. This is used when writing text and clearing\nthe terminal.\n\n**Returns:**\n- number The current background colour."},{"label":"getBackgroundColor","detail":"getBackgroundColor(): number","parameters":[],"documentation":"Return the current background colour. This is used when writing text and clearing\nthe terminal.\n\n**Returns:**\n- number The current background colour."},{"label":"setBackgroundColour","detail":"setBackgroundColour(colour: number): void","parameters":["colour: number"],"documentation":"Set the current background colour. This is used when writing text and clearing the\nterminal.\n\n**Parameters:**\n- **colour: number** The new background colour."},{"label":"setBackgroundColor","detail":"setBackgroundColor(colour: number): void","parameters":["colour: number"],"documentation":"Set the current background colour. This is used when writing text and clearing the\nterminal.\n\n**Parameters:**\n- **colour: number** The new background colour."},{"label":"isColour","detail":"isColour(): boolean","parameters":[],"documentation":"Determine if this terminal supports colour.\n\n**Returns:**\n- boolean Whether this terminal supports colour."},{"label":"isColor","detail":"isColor(): boolean","parameters":[],"documentation":"Determine if this terminal supports colour.\n\n**Returns:**\n- boolean Whether this terminal supports colour."},{"label":"blit","detail":"blit(text: string, textColour: string, backgroundColour: string): void","parameters":["text: string","textColour: string","backgroundColour: string"],"documentation":"Writes text to the terminal with the specific foreground and background colours.\n\n**Parameters:**\n- **text: string** The text to write.\n- **textColour: string** The corresponding text colours.\n- **backgroundColour: string** The corresponding background colours.\n\n**Usage:**\n\nPrints \"Hello, world!\" in rainbow text.\n\n```\n\nterm.blit(\"Hello, world!\",\"01234456789ab\",\"0000000000000\")\n\n```"},{"label":"setPaletteColour","detail":"setPaletteColour(index: number, colour: number, index: number, r: number, g: number, b: number): void","parameters":["index: number","colour: number","index: number","r: number","g: number","b: number"],"documentation":"Set the palette for a specific colour.\n\n**Parameters:**\n- **index: number** The colour whose palette should be changed.\n- **colour: number** A 24-bit integer representing the RGB value of the colour. For instance the integer\n0xFF0000 corresponds to the colour #FF0000.\n- **index: number** The colour whose palette should be changed.\n- **r: number** The intensity of the red channel, between 0 and 1.\n- **g: number** The intensity of the green channel, between 0 and 1.\n- **b: number** The intensity of the blue channel, between 0 and 1.\n\n**Usage:**\n\nChange the red colour from the default #CC4C4C to #FF0000.\n\n```\n\nterm.setPaletteColour(colors.red, 0xFF0000)\n\nterm.setTextColour(colors.red)\n\nprint(\"Hello, world!\")\n\nAs above, but specifying each colour channel separately.\n\nterm.setPaletteColour(colors.red, 1, 0, 0)\n\nterm.setTextColour(colors.red)\n\nprint(\"Hello, world!\")\n\n```"},{"label":"setPaletteColor","detail":"setPaletteColor(index: number, colour: number, index: number, r: number, g: number, b: number): void","parameters":["index: number","colour: number","index: number","r: number","g: number","b: number"],"documentation":"Set the palette for a specific colour.\n\n**Parameters:**\n- **index: number** The colour whose palette should be changed.\n- **colour: number** A 24-bit integer representing the RGB value of the colour. For instance the integer\n0xFF0000 corresponds to the colour #FF0000.\n- **index: number** The colour whose palette should be changed.\n- **r: number** The intensity of the red channel, between 0 and 1.\n- **g: number** The intensity of the green channel, between 0 and 1.\n- **b: number** The intensity of the blue channel, between 0 and 1.\n\n**Usage:**\n\nChange the red colour from the default #CC4C4C to #FF0000.\n\n```\n\nterm.setPaletteColour(colors.red, 0xFF0000)\n\nterm.setTextColour(colors.red)\n\nprint(\"Hello, world!\")\n\nAs above, but specifying each colour channel separately.\n\nterm.setPaletteColour(colors.red, 1, 0, 0)\n\nterm.setTextColour(colors.red)\n\nprint(\"Hello, world!\")\n\n```"},{"label":"getPaletteColour","detail":"getPaletteColour(colour: number): number","parameters":["colour: number"],"documentation":"Get the current palette for a specific colour.\n\n**Parameters:**\n- **colour: number** The colour whose palette should be fetched.\n\n**Returns:**\n- number The red channel, will be between 0 and 1.\n- number The green channel, will be between 0 and 1.\n- number The blue channel, will be between 0 and 1."},{"label":"getPaletteColor","detail":"getPaletteColor(colour: number): number","parameters":["colour: number"],"documentation":"Get the current palette for a specific colour.\n\n**Parameters:**\n- **colour: number** The colour whose palette should be fetched.\n\n**Returns:**\n- number The red channel, will be between 0 and 1.\n- number The green channel, will be between 0 and 1.\n- number The blue channel, will be between 0 and 1."}];
  }
}
