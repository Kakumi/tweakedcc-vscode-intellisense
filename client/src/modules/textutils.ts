import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class textutilsModule extends BaseModule {
  constructor() {
    super(`textutils`, `Helpful utilities for formatting and manipulating strings.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"slowWrite","detail":"slowWrite(text: string, rate?: number): void","parameters":["text: string","rate?: number"],"documentation":"Slowly writes string text at current cursor position,\ncharacter-by-character.\n\n**Parameters:**\n- **text: string** The the text to write to the screen\n- **rate?: number** The number of characters to write each second,\nDefaults to 20.\n\n**Usage:**\n\ntextutils.slowWrite(\"Hello, world!\")\n\n```\n\ntextutils.slowWrite(\"Hello, world!\", 5)\n\n```"},{"label":"slowPrint","detail":"slowPrint(sText: string, nRate?: number): void","parameters":["sText: string","nRate?: number"],"documentation":"Slowly prints string text at current cursor position,\ncharacter-by-character.\n\n**Parameters:**\n- **sText: string** The the text to write to the screen\n- **nRate?: number** The number of characters to write each second,\nDefaults to 20.\n\n**Usage:**\n\ntextutils.slowPrint(\"Hello, world!\")\n\n```\n\ntextutils.slowPrint(\"Hello, world!\", 5)\n\n```"},{"label":"formatTime","detail":"formatTime(nTime: number, bTwentyFourHour?: boolean): string","parameters":["nTime: number","bTwentyFourHour?: boolean"],"documentation":"Takes input time and formats it in a more readable format such as 6:30 PM.\n\n**Parameters:**\n- **nTime: number** The time to format, as provided by os.time.\n- **bTwentyFourHour?: boolean** Whether to format this as a 24-hour\nclock (18:30) rather than a 12-hour one (6:30 AM)\n\n**Returns:**\n- string The formatted time\n\n**Usage:**\n\nPrint the current in-game time as a 12-hour clock.\n\n```\n\ntextutils.formatTime(os.time())\n\nPrint the local time as a 24-hour clock.\n\ntextutils.formatTime(os.time(\"local\"), true)\n\n```"},{"label":"pagedPrint","detail":"pagedPrint(text: string, free_lines?: number): number","parameters":["text: string","free_lines?: number"],"documentation":"Prints a given string to the display.\n\n**Parameters:**\n- **text: string** The text to print to the screen.\n- **free_lines?: number** The number of lines which will be\nautomatically scrolled before the first prompt appears (meaning free_lines +\n1 lines will be printed). This can be set to the cursor's y position - 2 to\nalways try to fill the screen. Defaults to 0, meaning only one line is\ndisplayed before prompting.\n\n**Returns:**\n- number The number of lines printed.\n\n**Usage:**\n\nGenerates several lines of text and then prints it, paging once the\n\n```\n\nbottom of the terminal is reached.\n\nlocal lines = {}\n\nfor i = 1, 30 do lines[i] = (\"This is line #%d\"):format(i) end\n\nlocal message = table.concat(lines, \"\\n\")\n\n\n\nlocal width, height = term.getCursorPos()\n\ntextutils.pagedPrint(message, height - 2)\n\n```"},{"label":"tabulate","detail":"tabulate(... { string... } | number The rows and text colors to display.): void","parameters":["... { string... } | number The rows and text colors to display."],"documentation":"Prints tables in a structured form.\n\n**Parameters:**\n- ... { string... } | number The rows and text colors to display.\n\n**Usage:**\n\ntextutils.tabulate(\n\n```\n\n  colors.orange, { \"1\", \"2\", \"3\" },\n\n  colors.lightBlue, { \"A\", \"B\", \"C\" }\n\n)\n\n```"},{"label":"pagedTabulate","detail":"pagedTabulate(... { string... } | number The rows and text colors to display.): void","parameters":["... { string... } | number The rows and text colors to display."],"documentation":"Prints tables in a structured form, stopping and prompting for input should\nthe result not fit on the terminal.\n\n**Parameters:**\n- ... { string... } | number The rows and text colors to display.\n\n**Usage:**\n\nGenerates a long table, tabulates it, and prints it to the screen.\n\n```\n\nlocal rows = {}\n\nfor i = 1, 30 do rows[i] = {(\"Row #%d\"):format(i), math.random(1, 400)} end\n\n\n\ntextutils.pagedTabulate(colors.orange, {\"Column\", \"Value\"}, colors.lightBlue, table.unpack(rows))\n\n```"},{"label":"empty_json_array","detail":"empty_json_array(): void","parameters":[],"documentation":"A table representing an empty JSON array, in order to distinguish it from an\nempty JSON object.\n\n**Usage:**\n\ntextutils.serialiseJSON(textutils.empty_json_array)"},{"label":"json_null","detail":"json_null(): void","parameters":[],"documentation":"A table representing the JSON null value.\n\n**Usage:**\n\ntextutils.serialiseJSON(textutils.json_null)"},{"label":"serialize","detail":"serialize(t  The object to serialise, opts { compact? = boolean, allow_repetitions? = boolean } Options for serialisation.\n\ncompact: Do not emit indentation and other whitespace between terms.\nallow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves)., compact: Do not emit indentation and other whitespace between terms., allow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).): string","parameters":["t  The object to serialise","opts { compact? = boolean, allow_repetitions? = boolean } Options for serialisation.\n\ncompact: Do not emit indentation and other whitespace between terms.\nallow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).","compact: Do not emit indentation and other whitespace between terms.","allow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves)."],"documentation":"Convert a Lua object into a textual representation, suitable for\nsaving in a file or pretty-printing.\n\n**Parameters:**\n- t  The object to serialise\n- opts { compact? = boolean, allow_repetitions? = boolean } Options for serialisation.\n\ncompact: Do not emit indentation and other whitespace between terms.\nallow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).\n- compact: Do not emit indentation and other whitespace between terms.\n- allow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).\n\n**Returns:**\n- string The serialised representation\n\n**Usage:**\n\nSerialise a basic table.\n\n```\n\ntextutils.serialise({ 1, 2, 3, a = 1, [\"another key\"] = { true } })\n\nDemonstrates some of the other options\n\nlocal tbl = { 1, 2, 3 }\n\nprint(textutils.serialise({ tbl, tbl }, { allow_repetitions = true }))\n\n\n\nprint(textutils.serialise(tbl, { compact = true }))\n\n```"},{"label":"serialise","detail":"serialise(t  The object to serialise, opts { compact? = boolean, allow_repetitions? = boolean } Options for serialisation.\n\ncompact: Do not emit indentation and other whitespace between terms.\nallow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves)., compact: Do not emit indentation and other whitespace between terms., allow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).): string","parameters":["t  The object to serialise","opts { compact? = boolean, allow_repetitions? = boolean } Options for serialisation.\n\ncompact: Do not emit indentation and other whitespace between terms.\nallow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).","compact: Do not emit indentation and other whitespace between terms.","allow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves)."],"documentation":"Convert a Lua object into a textual representation, suitable for\nsaving in a file or pretty-printing.\n\n**Parameters:**\n- t  The object to serialise\n- opts { compact? = boolean, allow_repetitions? = boolean } Options for serialisation.\n\ncompact: Do not emit indentation and other whitespace between terms.\nallow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).\n- compact: Do not emit indentation and other whitespace between terms.\n- allow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).\n\n**Returns:**\n- string The serialised representation\n\n**Usage:**\n\nSerialise a basic table.\n\n```\n\ntextutils.serialise({ 1, 2, 3, a = 1, [\"another key\"] = { true } })\n\nDemonstrates some of the other options\n\nlocal tbl = { 1, 2, 3 }\n\nprint(textutils.serialise({ tbl, tbl }, { allow_repetitions = true }))\n\n\n\nprint(textutils.serialise(tbl, { compact = true }))\n\n```"},{"label":"unserialize","detail":"unserialize(s: string): The | nil","parameters":["s: string"],"documentation":"Converts a serialised string back into a reassembled Lua object.\n\n**Parameters:**\n- **s: string** The serialised string to deserialise.\n\n**Returns:**\n- The deserialised object\n- nil If the object could not be deserialised."},{"label":"unserialise","detail":"unserialise(s: string): The | nil","parameters":["s: string"],"documentation":"Converts a serialised string back into a reassembled Lua object.\n\n**Parameters:**\n- **s: string** The serialised string to deserialise.\n\n**Returns:**\n- The deserialised object\n- nil If the object could not be deserialised."},{"label":"serializeJSON","detail":"serializeJSON(t  The value to serialise. Like textutils.serialise, this should not\ncontain recursive tables or functions., options? { nbt_style? = boolean, unicode_strings? = boolean, allow_repetitions? = boolean } Options for serialisation.\n\nnbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of standard JSON.\nunicode_strings: Whether to treat strings as containing UTF-8 characters instead of\nusing the default 8-bit character set.\nallow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves)., nbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of standard JSON., unicode_strings: Whether to treat strings as containing UTF-8 characters instead of\nusing the default 8-bit character set., allow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves)., t  The value to serialise. Like textutils.serialise, this should not\ncontain recursive tables or functions., bNBTStyle: boolean): string","parameters":["t  The value to serialise. Like textutils.serialise, this should not\ncontain recursive tables or functions.","options? { nbt_style? = boolean, unicode_strings? = boolean, allow_repetitions? = boolean } Options for serialisation.\n\nnbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of standard JSON.\nunicode_strings: Whether to treat strings as containing UTF-8 characters instead of\nusing the default 8-bit character set.\nallow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).","nbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of standard JSON.","unicode_strings: Whether to treat strings as containing UTF-8 characters instead of\nusing the default 8-bit character set.","allow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).","t  The value to serialise. Like textutils.serialise, this should not\ncontain recursive tables or functions.","bNBTStyle: boolean"],"documentation":"Returns a JSON representation of the given data.\n\n**Parameters:**\n- t  The value to serialise. Like textutils.serialise, this should not\ncontain recursive tables or functions.\n- options? { nbt_style? = boolean, unicode_strings? = boolean, allow_repetitions? = boolean } Options for serialisation.\n\nnbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of standard JSON.\nunicode_strings: Whether to treat strings as containing UTF-8 characters instead of\nusing the default 8-bit character set.\nallow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).\n- nbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of standard JSON.\n- unicode_strings: Whether to treat strings as containing UTF-8 characters instead of\nusing the default 8-bit character set.\n- allow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).\n- t  The value to serialise. Like textutils.serialise, this should not\ncontain recursive tables or functions.\n- **bNBTStyle: boolean** Whether to produce NBT-style JSON (non-quoted keys)\ninstead of standard JSON.\n\n**Returns:**\n- string The JSON representation of the input.\n\n**Usage:**\n\nSerialise a simple object\n\n```\n\ntextutils.serialiseJSON({ values = { 1, \"2\", true } })\n\nSerialise an object to a NBT-style string\n\ntextutils.serialiseJSON({ values = { 1, \"2\", true } }, { nbt_style = true })\n\n```"},{"label":"serialiseJSON","detail":"serialiseJSON(t  The value to serialise. Like textutils.serialise, this should not\ncontain recursive tables or functions., options? { nbt_style? = boolean, unicode_strings? = boolean, allow_repetitions? = boolean } Options for serialisation.\n\nnbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of standard JSON.\nunicode_strings: Whether to treat strings as containing UTF-8 characters instead of\nusing the default 8-bit character set.\nallow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves)., nbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of standard JSON., unicode_strings: Whether to treat strings as containing UTF-8 characters instead of\nusing the default 8-bit character set., allow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves)., t  The value to serialise. Like textutils.serialise, this should not\ncontain recursive tables or functions., bNBTStyle: boolean): string","parameters":["t  The value to serialise. Like textutils.serialise, this should not\ncontain recursive tables or functions.","options? { nbt_style? = boolean, unicode_strings? = boolean, allow_repetitions? = boolean } Options for serialisation.\n\nnbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of standard JSON.\nunicode_strings: Whether to treat strings as containing UTF-8 characters instead of\nusing the default 8-bit character set.\nallow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).","nbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of standard JSON.","unicode_strings: Whether to treat strings as containing UTF-8 characters instead of\nusing the default 8-bit character set.","allow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).","t  The value to serialise. Like textutils.serialise, this should not\ncontain recursive tables or functions.","bNBTStyle: boolean"],"documentation":"Returns a JSON representation of the given data.\n\n**Parameters:**\n- t  The value to serialise. Like textutils.serialise, this should not\ncontain recursive tables or functions.\n- options? { nbt_style? = boolean, unicode_strings? = boolean, allow_repetitions? = boolean } Options for serialisation.\n\nnbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of standard JSON.\nunicode_strings: Whether to treat strings as containing UTF-8 characters instead of\nusing the default 8-bit character set.\nallow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).\n- nbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of standard JSON.\n- unicode_strings: Whether to treat strings as containing UTF-8 characters instead of\nusing the default 8-bit character set.\n- allow_repetitions: Relax the check for recursive tables, allowing them to appear multiple\ntimes (as long as tables do not appear inside themselves).\n- t  The value to serialise. Like textutils.serialise, this should not\ncontain recursive tables or functions.\n- **bNBTStyle: boolean** Whether to produce NBT-style JSON (non-quoted keys)\ninstead of standard JSON.\n\n**Returns:**\n- string The JSON representation of the input.\n\n**Usage:**\n\nSerialise a simple object\n\n```\n\ntextutils.serialiseJSON({ values = { 1, \"2\", true } })\n\nSerialise an object to a NBT-style string\n\ntextutils.serialiseJSON({ values = { 1, \"2\", true } }, { nbt_style = true })\n\n```"},{"label":"unserializeJSON","detail":"unserializeJSON(s: string, options? { nbt_style? = boolean, parse_null? = boolean, parse_empty_array? = boolean } Options which control how this JSON object is parsed.\n\nnbt_style: When true, this will accept stringified NBT strings,\nas produced by many commands.\nparse_null: When true, null will be parsed as json_null, rather than\nnil.\nparse_empty_array: When false, empty arrays will be parsed as a new table.\nBy default (or when this value is true), they are parsed as empty_json_array., nbt_style: When true, this will accept stringified NBT strings,\nas produced by many commands., parse_null: When true, null will be parsed as json_null, rather than\nnil., parse_empty_array: When false, empty arrays will be parsed as a new table.\nBy default (or when this value is true), they are parsed as empty_json_array.): The | nil | string","parameters":["s: string","options? { nbt_style? = boolean, parse_null? = boolean, parse_empty_array? = boolean } Options which control how this JSON object is parsed.\n\nnbt_style: When true, this will accept stringified NBT strings,\nas produced by many commands.\nparse_null: When true, null will be parsed as json_null, rather than\nnil.\nparse_empty_array: When false, empty arrays will be parsed as a new table.\nBy default (or when this value is true), they are parsed as empty_json_array.","nbt_style: When true, this will accept stringified NBT strings,\nas produced by many commands.","parse_null: When true, null will be parsed as json_null, rather than\nnil.","parse_empty_array: When false, empty arrays will be parsed as a new table.\nBy default (or when this value is true), they are parsed as empty_json_array."],"documentation":"Converts a serialised JSON string back into a reassembled Lua object.\n\n**Parameters:**\n- **s: string** The serialised string to deserialise.\n- options? { nbt_style? = boolean, parse_null? = boolean, parse_empty_array? = boolean } Options which control how this JSON object is parsed.\n\nnbt_style: When true, this will accept stringified NBT strings,\nas produced by many commands.\nparse_null: When true, null will be parsed as json_null, rather than\nnil.\nparse_empty_array: When false, empty arrays will be parsed as a new table.\nBy default (or when this value is true), they are parsed as empty_json_array.\n- nbt_style: When true, this will accept stringified NBT strings,\nas produced by many commands.\n- parse_null: When true, null will be parsed as json_null, rather than\nnil.\n- parse_empty_array: When false, empty arrays will be parsed as a new table.\nBy default (or when this value is true), they are parsed as empty_json_array.\n\n**Returns:**\n- The deserialised object\n- nil If the object could not be deserialised.\n- string A message describing why the JSON string is invalid.\n\n**Usage:**\n\nUnserialise a basic JSON object\n\n```\n\ntextutils.unserialiseJSON('{\"name\": \"Steve\", \"age\": null}')\n\nUnserialise a basic JSON object, returning null values as json_null.\n\ntextutils.unserialiseJSON('{\"name\": \"Steve\", \"age\": null}', { parse_null = true })\n\n```"},{"label":"unserialiseJSON","detail":"unserialiseJSON(s: string, options? { nbt_style? = boolean, parse_null? = boolean, parse_empty_array? = boolean } Options which control how this JSON object is parsed.\n\nnbt_style: When true, this will accept stringified NBT strings,\nas produced by many commands.\nparse_null: When true, null will be parsed as json_null, rather than\nnil.\nparse_empty_array: When false, empty arrays will be parsed as a new table.\nBy default (or when this value is true), they are parsed as empty_json_array., nbt_style: When true, this will accept stringified NBT strings,\nas produced by many commands., parse_null: When true, null will be parsed as json_null, rather than\nnil., parse_empty_array: When false, empty arrays will be parsed as a new table.\nBy default (or when this value is true), they are parsed as empty_json_array.): The | nil | string","parameters":["s: string","options? { nbt_style? = boolean, parse_null? = boolean, parse_empty_array? = boolean } Options which control how this JSON object is parsed.\n\nnbt_style: When true, this will accept stringified NBT strings,\nas produced by many commands.\nparse_null: When true, null will be parsed as json_null, rather than\nnil.\nparse_empty_array: When false, empty arrays will be parsed as a new table.\nBy default (or when this value is true), they are parsed as empty_json_array.","nbt_style: When true, this will accept stringified NBT strings,\nas produced by many commands.","parse_null: When true, null will be parsed as json_null, rather than\nnil.","parse_empty_array: When false, empty arrays will be parsed as a new table.\nBy default (or when this value is true), they are parsed as empty_json_array."],"documentation":"Converts a serialised JSON string back into a reassembled Lua object.\n\n**Parameters:**\n- **s: string** The serialised string to deserialise.\n- options? { nbt_style? = boolean, parse_null? = boolean, parse_empty_array? = boolean } Options which control how this JSON object is parsed.\n\nnbt_style: When true, this will accept stringified NBT strings,\nas produced by many commands.\nparse_null: When true, null will be parsed as json_null, rather than\nnil.\nparse_empty_array: When false, empty arrays will be parsed as a new table.\nBy default (or when this value is true), they are parsed as empty_json_array.\n- nbt_style: When true, this will accept stringified NBT strings,\nas produced by many commands.\n- parse_null: When true, null will be parsed as json_null, rather than\nnil.\n- parse_empty_array: When false, empty arrays will be parsed as a new table.\nBy default (or when this value is true), they are parsed as empty_json_array.\n\n**Returns:**\n- The deserialised object\n- nil If the object could not be deserialised.\n- string A message describing why the JSON string is invalid.\n\n**Usage:**\n\nUnserialise a basic JSON object\n\n```\n\ntextutils.unserialiseJSON('{\"name\": \"Steve\", \"age\": null}')\n\nUnserialise a basic JSON object, returning null values as json_null.\n\ntextutils.unserialiseJSON('{\"name\": \"Steve\", \"age\": null}', { parse_null = true })\n\n```"},{"label":"urlEncode","detail":"urlEncode(str: string): string","parameters":["str: string"],"documentation":"Replaces certain characters in a string to make it safe for use in URLs or POST data.\n\n**Parameters:**\n- **str: string** The string to encode\n\n**Returns:**\n- string The encoded string.\n\n**Usage:**\n\nprint(\"https://example.com/?view=\" .. textutils.urlEncode(\"some text&things\"))"},{"label":"complete","detail":"complete(sSearchText: string, tSearchTable?: table): {","parameters":["sSearchText: string","tSearchTable?: table"],"documentation":"Provides a list of possible completions for a partial Lua expression.\n\n**Parameters:**\n- **sSearchText: string** The partial expression to complete, such as a\nvariable name or table index.\n- **tSearchTable?: table** The table to find variables in, defaulting to\nthe global environment (_G). The function also searches the \"parent\"\nenvironment via the __index metatable field.\n\n**Returns:**\n- { string... } The (possibly empty) list of completions.\n\n**Usage:**\n\ntextutils.complete( \"pa\", _ENV )"}];
  }
}
