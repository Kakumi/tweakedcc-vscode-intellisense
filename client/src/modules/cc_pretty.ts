import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class cc_prettyModule extends BaseModule {
  constructor() {
    super(`cc_pretty`, `A pretty printer for rendering data structures in an aestheticallypleasing manner.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"empty","detail":"empty(): void","parameters":[],"documentation":"An empty document."},{"label":"space","detail":"space(): void","parameters":[],"documentation":"A document with a single space in it."},{"label":"line","detail":"line(): void","parameters":[],"documentation":"A line break. When collapsed with group, this will be replaced with empty."},{"label":"space_line","detail":"space_line(): void","parameters":[],"documentation":"A line break. When collapsed with group, this will be replaced with space."},{"label":"text","detail":"text(text: string, colour?: number): Doc","parameters":["text: string","colour?: number"],"documentation":"Create a new document from a string.\n\n**Parameters:**\n- **text: string** The string to construct a new document with.\n- **colour?: number** The colour this text should be printed with. If not given, we default to the current\ncolour.\n\n**Returns:**\n- Doc The document with the provided text.\n\n**Usage:**\n\nWrite some blue text.\n\n```\n\nlocal pretty = require \"cc.pretty\"\n\npretty.print(pretty.text(\"Hello!\", colours.blue))\n\n```"},{"label":"concat","detail":"concat(... Doc | string The documents to concatenate.): Doc","parameters":["... Doc | string The documents to concatenate."],"documentation":"Concatenate several documents together. This behaves very similar to string concatenation.\n\n**Parameters:**\n- ... Doc | string The documents to concatenate.\n\n**Returns:**\n- Doc The concatenated documents.\n\n**Usage:**\n\nlocal pretty = require \"cc.pretty\"\n\n```\n\nlocal doc1, doc2 = pretty.text(\"doc1\"), pretty.text(\"doc2\")\n\nprint(pretty.concat(doc1, \" - \", doc2))\n\nprint(doc1 .. \" - \" .. doc2) -- Also supports ..\n\n```"},{"label":"nest","detail":"nest(depth: number, doc: Doc): Doc","parameters":["depth: number","doc: Doc"],"documentation":"Indent later lines of the given document with the given number of spaces.\n\n**Parameters:**\n- **depth: number** The number of spaces with which the document should be indented.\n- **doc: Doc** The document to indent.\n\n**Returns:**\n- Doc The nested document.\n\n**Usage:**\n\nlocal pretty = require \"cc.pretty\"\n\n```\n\nprint(pretty.nest(2, pretty.text(\"foo\\nbar\")))\n\n```"},{"label":"group","detail":"group(doc: Doc): Doc","parameters":["doc: Doc"],"documentation":"Builds a document which is displayed on a single line if there is enough\nroom, or as normal if not.\n\n**Parameters:**\n- **doc: Doc** The document to group.\n\n**Returns:**\n- Doc The grouped document.\n\n**Usage:**\n\nUses group to show things being displayed on one or multiple lines.\n\n```\n\nlocal pretty = require \"cc.pretty\"\n\nlocal doc = pretty.group(\"Hello\" .. pretty.space_line .. \"World\")\n\nprint(pretty.render(doc, 5)) -- On multiple lines\n\nprint(pretty.render(doc, 20)) -- Collapsed onto one.\n\n```"},{"label":"write","detail":"write(doc: Doc, ribbon_frac?: number): void","parameters":["doc: Doc","ribbon_frac?: number"],"documentation":"Display a document on the terminal.\n\n**Parameters:**\n- **doc: Doc** The document to render\n- **ribbon_frac?: number** = 0.6 The maximum fraction of the width that we should write in."},{"label":"print","detail":"print(doc: Doc, ribbon_frac?: number): void","parameters":["doc: Doc","ribbon_frac?: number"],"documentation":"Display a document on the terminal with a trailing new line.\n\n**Parameters:**\n- **doc: Doc** The document to render.\n- **ribbon_frac?: number** = 0.6 The maximum fraction of the width that we should write in."},{"label":"render","detail":"render(doc: Doc, width?: number, ribbon_frac?: number): string","parameters":["doc: Doc","width?: number","ribbon_frac?: number"],"documentation":"Render a document, converting it into a string.\n\n**Parameters:**\n- **doc: Doc** The document to render.\n- **width?: number** The maximum width of this document. Note that long strings will not be wrapped to fit\nthis width - it is only used for finding the best layout.\n- **ribbon_frac?: number** = 0.6 The maximum fraction of the width that we should write in.\n\n**Returns:**\n- string The rendered document as a string."},{"label":"pretty","detail":"pretty(obj  The object to pretty-print., options? { function_args = boolean, function_source = boolean } Controls how various properties are displayed.\n\nfunction_args: Show the arguments to a function if known (false by default).\nfunction_source: Show where the function was defined, instead of\nfunction: xxxxxxxx (false by default)., function_args: Show the arguments to a function if known (false by default)., function_source: Show where the function was defined, instead of\nfunction: xxxxxxxx (false by default).): Doc","parameters":["obj  The object to pretty-print.","options? { function_args = boolean, function_source = boolean } Controls how various properties are displayed.\n\nfunction_args: Show the arguments to a function if known (false by default).\nfunction_source: Show where the function was defined, instead of\nfunction: xxxxxxxx (false by default).","function_args: Show the arguments to a function if known (false by default).","function_source: Show where the function was defined, instead of\nfunction: xxxxxxxx (false by default)."],"documentation":"Pretty-print an arbitrary object, converting it into a document.\n\n**Parameters:**\n- obj  The object to pretty-print.\n- options? { function_args = boolean, function_source = boolean } Controls how various properties are displayed.\n\nfunction_args: Show the arguments to a function if known (false by default).\nfunction_source: Show where the function was defined, instead of\nfunction: xxxxxxxx (false by default).\n- function_args: Show the arguments to a function if known (false by default).\n- function_source: Show where the function was defined, instead of\nfunction: xxxxxxxx (false by default).\n\n**Returns:**\n- Doc The object formatted as a document.\n\n**Usage:**\n\nDisplay a table on the screen\n\n```\n\nlocal pretty = require \"cc.pretty\"\n\npretty.print(pretty.pretty({ 1, 2, 3 }))\n\n```"},{"label":"pretty_print","detail":"pretty_print(obj  The object to pretty-print., options? { function_args = boolean, function_source = boolean } Controls how various properties are displayed.\n\nfunction_args: Show the arguments to a function if known (false by default).\nfunction_source: Show where the function was defined, instead of\nfunction: xxxxxxxx (false by default)., function_args: Show the arguments to a function if known (false by default)., function_source: Show where the function was defined, instead of\nfunction: xxxxxxxx (false by default)., ribbon_frac?: number): void","parameters":["obj  The object to pretty-print.","options? { function_args = boolean, function_source = boolean } Controls how various properties are displayed.\n\nfunction_args: Show the arguments to a function if known (false by default).\nfunction_source: Show where the function was defined, instead of\nfunction: xxxxxxxx (false by default).","function_args: Show the arguments to a function if known (false by default).","function_source: Show where the function was defined, instead of\nfunction: xxxxxxxx (false by default).","ribbon_frac?: number"],"documentation":"A shortcut for calling pretty and print together.\n\n**Parameters:**\n- obj  The object to pretty-print.\n- options? { function_args = boolean, function_source = boolean } Controls how various properties are displayed.\n\nfunction_args: Show the arguments to a function if known (false by default).\nfunction_source: Show where the function was defined, instead of\nfunction: xxxxxxxx (false by default).\n- function_args: Show the arguments to a function if known (false by default).\n- function_source: Show where the function was defined, instead of\nfunction: xxxxxxxx (false by default).\n- **ribbon_frac?: number** = 0.6 The maximum fraction of the width that we should write in.\n\n**Usage:**\n\nDisplay a table on the screen.\n\n```\n\nlocal pretty = require \"cc.pretty\"\n\npretty.pretty_print({ 1, 2, 3 })\n\n```"}];
  }
}
