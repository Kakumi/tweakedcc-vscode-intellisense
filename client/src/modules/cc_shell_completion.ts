import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class cc_shell_completionModule extends BaseModule {
  constructor() {
    super(`cc_shell_completion`, `A collection of helper methods for working with shell completion.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"file","detail":"file(shell: table, text: string): {","parameters":["shell: table","text: string"],"documentation":"Complete the name of a file relative to the current working directory.\n\n**Parameters:**\n- **shell: table** The shell we're completing in.\n- **text: string** Current text to complete.\n\n**Returns:**\n- { string... } A list of suffixes of matching files."},{"label":"dir","detail":"dir(shell: table, text: string): {","parameters":["shell: table","text: string"],"documentation":"Complete the name of a directory relative to the current working directory.\n\n**Parameters:**\n- **shell: table** The shell we're completing in.\n- **text: string** Current text to complete.\n\n**Returns:**\n- { string... } A list of suffixes of matching directories."},{"label":"dirOrFile","detail":"dirOrFile(shell: table, text: string, previous { string... } The shell arguments before this one., add_space?: boolean): {","parameters":["shell: table","text: string","previous { string... } The shell arguments before this one.","add_space?: boolean"],"documentation":"Complete the name of a file or directory relative to the current working\ndirectory.\n\n**Parameters:**\n- **shell: table** The shell we're completing in.\n- **text: string** Current text to complete.\n- previous { string... } The shell arguments before this one.\n- **add_space?: boolean** Whether to add a space after the completed item.\n\n**Returns:**\n- { string... } A list of suffixes of matching files and directories."},{"label":"program","detail":"program(shell: table, text: string): {","parameters":["shell: table","text: string"],"documentation":"Complete the name of a program.\n\n**Parameters:**\n- **shell: table** The shell we're completing in.\n- **text: string** Current text to complete.\n\n**Returns:**\n- { string... } A list of suffixes of matching programs."},{"label":"programWithArgs","detail":"programWithArgs(shell: table, text: string, previous { string... } The shell arguments before this one., starting: number): {","parameters":["shell: table","text: string","previous { string... } The shell arguments before this one.","starting: number"],"documentation":"Complete arguments of a program.\n\n**Parameters:**\n- **shell: table** The shell we're completing in.\n- **text: string** Current text to complete.\n- previous { string... } The shell arguments before this one.\n- **starting: number** Which argument index this program and args start at.\n\n**Returns:**\n- { string... } A list of suffixes of matching programs or arguments."},{"label":"help","detail":"help(): void","parameters":[],"documentation":"Wraps help.completeTopic as a build compatible function."},{"label":"choice","detail":"choice(): void","parameters":[],"documentation":"Wraps cc.completion.choice as a build compatible function."},{"label":"peripheral","detail":"peripheral(): void","parameters":[],"documentation":"Wraps cc.completion.peripheral as a build compatible function."},{"label":"side","detail":"side(): void","parameters":[],"documentation":"Wraps cc.completion.side as a build compatible function."},{"label":"setting","detail":"setting(): void","parameters":[],"documentation":"Wraps cc.completion.setting as a build compatible function."},{"label":"command","detail":"command(): void","parameters":[],"documentation":"Wraps cc.completion.command as a build compatible function."},{"label":"build","detail":"build(... nil | table | function Every argument to build represents an argument\nto the program you wish to complete. Each argument can be one of three types:\n\n\nnil: This argument will not be completed.\n\n\nA function: This argument will be completed with the given function. It is\ncalled with the shell object, the string to complete and the arguments\nbefore this one.\n\n\nA table: This acts as a more powerful version of the function case. The table\nmust have a function as the first item - this will be called with the shell,\nstring and preceding arguments as above, but also followed by any additional\nitems in the table. This provides a more convenient interface to pass\noptions to your completion functions.\nIf this table is the last argument, it may also set the many key to true,\nwhich states this function should be used to complete any remaining arguments., nil: This argument will not be completed., A: function, A: table): void","parameters":["... nil | table | function Every argument to build represents an argument\nto the program you wish to complete. Each argument can be one of three types:\n\n\nnil: This argument will not be completed.\n\n\nA function: This argument will be completed with the given function. It is\ncalled with the shell object, the string to complete and the arguments\nbefore this one.\n\n\nA table: This acts as a more powerful version of the function case. The table\nmust have a function as the first item - this will be called with the shell,\nstring and preceding arguments as above, but also followed by any additional\nitems in the table. This provides a more convenient interface to pass\noptions to your completion functions.\nIf this table is the last argument, it may also set the many key to true,\nwhich states this function should be used to complete any remaining arguments.","nil: This argument will not be completed.","A: function","A: table"],"documentation":"A helper function for building shell completion arguments.\n\n**Parameters:**\n- ... nil | table | function Every argument to build represents an argument\nto the program you wish to complete. Each argument can be one of three types:\n\n\nnil: This argument will not be completed.\n\n\nA function: This argument will be completed with the given function. It is\ncalled with the shell object, the string to complete and the arguments\nbefore this one.\n\n\nA table: This acts as a more powerful version of the function case. The table\nmust have a function as the first item - this will be called with the shell,\nstring and preceding arguments as above, but also followed by any additional\nitems in the table. This provides a more convenient interface to pass\noptions to your completion functions.\nIf this table is the last argument, it may also set the many key to true,\nwhich states this function should be used to complete any remaining arguments.\n- nil: This argument will not be completed.\n- **A: function**: This argument will be completed with the given function. It is\ncalled with the shell object, the string to complete and the arguments\nbefore this one.\n- **A: table**: This acts as a more powerful version of the function case. The table\nmust have a function as the first item - this will be called with the shell,\nstring and preceding arguments as above, but also followed by any additional\nitems in the table. This provides a more convenient interface to pass\noptions to your completion functions.\nIf this table is the last argument, it may also set the many key to true,\nwhich states this function should be used to complete any remaining arguments."}];
  }
}
