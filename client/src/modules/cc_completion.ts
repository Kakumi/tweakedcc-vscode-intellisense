import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class cc_completionModule extends BaseModule {
  constructor() {
    super(`cc_completion`, `A collection of helper methods for working with input completion, suchas that require by _G.read.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"choice","detail":"choice(text: string, choices { string... } The list of choices to complete from., add_space?: boolean): {","parameters":["text: string","choices { string... } The list of choices to complete from.","add_space?: boolean"],"documentation":"Complete from a choice of one or more strings.\n\n**Parameters:**\n- **text: string** The input string to complete.\n- choices { string... } The list of choices to complete from.\n- **add_space?: boolean** Whether to add a space after the completed item.\n\n**Returns:**\n- { string... } A list of suffixes of matching strings.\n\n**Usage:**\n\nCall _G.read, completing the names of various animals.\n\n```\n\nlocal completion = require \"cc.completion\"\n\nlocal animals = { \"dog\", \"cat\", \"lion\", \"unicorn\" }\n\nread(nil, nil, function(text) return completion.choice(text, animals) end)\n\n```"},{"label":"peripheral","detail":"peripheral(text: string, add_space?: boolean): {","parameters":["text: string","add_space?: boolean"],"documentation":"Complete the name of a currently attached peripheral.\n\n**Parameters:**\n- **text: string** The input string to complete.\n- **add_space?: boolean** Whether to add a space after the completed name.\n\n**Returns:**\n- { string... } A list of suffixes of matching peripherals.\n\n**Usage:**\n\nlocal completion = require \"cc.completion\"\n\n```\n\nread(nil, nil, completion.peripheral)\n\n```"},{"label":"side","detail":"side(text: string, add_space?: boolean): {","parameters":["text: string","add_space?: boolean"],"documentation":"Complete the side of a computer.\n\n**Parameters:**\n- **text: string** The input string to complete.\n- **add_space?: boolean** Whether to add a space after the completed side.\n\n**Returns:**\n- { string... } A list of suffixes of matching sides.\n\n**Usage:**\n\nlocal completion = require \"cc.completion\"\n\n```\n\nread(nil, nil, completion.side)\n\n```"},{"label":"setting","detail":"setting(text: string, add_space?: boolean): {","parameters":["text: string","add_space?: boolean"],"documentation":"Complete a setting.\n\n**Parameters:**\n- **text: string** The input string to complete.\n- **add_space?: boolean** Whether to add a space after the completed settings.\n\n**Returns:**\n- { string... } A list of suffixes of matching settings.\n\n**Usage:**\n\nlocal completion = require \"cc.completion\"\n\n```\n\nread(nil, nil, completion.setting)\n\n```"},{"label":"command","detail":"command(text: string, add_space?: boolean): {","parameters":["text: string","add_space?: boolean"],"documentation":"Complete the name of a Minecraft command.\n\n**Parameters:**\n- **text: string** The input string to complete.\n- **add_space?: boolean** Whether to add a space after the completed command.\n\n**Returns:**\n- { string... } A list of suffixes of matching commands.\n\n**Usage:**\n\nlocal completion = require \"cc.completion\"\n\n```\n\nread(nil, nil, completion.command)\n\n```"}];
  }
}
