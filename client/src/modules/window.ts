import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class windowModule extends BaseModule {
  constructor() {
    super(`window`, `A terminal redirect occupying a smaller area of anexisting terminal. This allows for easy definition of spaces within the display
that can be written/drawn to, then later redrawn/repositioned/etc as need
be. The API itself contains only one function, window.create, which returns
the windows themselves.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"create","detail":"create(parent: term, nX: number, nY: number, nWidth: number, nHeight: number, bStartVisible?: boolean): Window","parameters":["parent: term","nX: number","nY: number","nWidth: number","nHeight: number","bStartVisible?: boolean"],"documentation":"Returns a terminal object that is a space within the specified parent\nterminal object. This can then be used (or even redirected to) in the same\nmanner as eg a wrapped monitor. Refer to the term API for a list of\nfunctions available to it.\n\n**Parameters:**\n- **parent: term**.Redirect The parent terminal redirect to draw to.\n- **nX: number** The x coordinate this window is drawn at in the parent terminal\n- **nY: number** The y coordinate this window is drawn at in the parent terminal\n- **nWidth: number** The width of this window\n- **nHeight: number** The height of this window\n- **bStartVisible?: boolean** Whether this window is visible by\ndefault. Defaults to true.\n\n**Returns:**\n- Window The constructed window\n\n**Usage:**\n\nCreate a smaller window, fill it red and write some text to it.\n\n```\n\nlocal my_window = window.create(term.current(), 1, 1, 20, 5)\n\nmy_window.setBackgroundColour(colours.red)\n\nmy_window.setTextColour(colours.white)\n\nmy_window.clear()\n\nmy_window.write(\"Testing my window!\")\n\nCreate a smaller window and redirect to it.\n\nlocal my_window = window.create(term.current(), 1, 1, 25, 5)\n\nterm.redirect(my_window)\n\nprint(\"Writing some long text which will wrap around and show the bounds of this window.\")\n\n```"},{"label":"ty:Window:write","detail":"ty:Window:write(sText): void","parameters":["sText"],"documentation":"\n\n**Parameters:**\n- sText"},{"label":"ty:Window:blit","detail":"ty:Window:blit(sText, sTextColor, sBackgroundColor): void","parameters":["sText","sTextColor","sBackgroundColor"],"documentation":"\n\n**Parameters:**\n- sText\n- sTextColor\n- sBackgroundColor"},{"label":"ty:Window:clear","detail":"ty:Window:clear(): void","parameters":[],"documentation":""},{"label":"ty:Window:clearLine","detail":"ty:Window:clearLine(): void","parameters":[],"documentation":""},{"label":"ty:Window:getCursorPos","detail":"ty:Window:getCursorPos(): void","parameters":[],"documentation":""},{"label":"ty:Window:setCursorPos","detail":"ty:Window:setCursorPos(x, y): void","parameters":["x","y"],"documentation":"\n\n**Parameters:**\n- x\n- y"},{"label":"ty:Window:setCursorBlink","detail":"ty:Window:setCursorBlink(blink): void","parameters":["blink"],"documentation":"\n\n**Parameters:**\n- blink"},{"label":"ty:Window:getCursorBlink","detail":"ty:Window:getCursorBlink(): void","parameters":[],"documentation":""},{"label":"ty:Window:isColor","detail":"ty:Window:isColor(): void","parameters":[],"documentation":""},{"label":"ty:Window:isColour","detail":"ty:Window:isColour(): void","parameters":[],"documentation":""},{"label":"ty:Window:setTextColor","detail":"ty:Window:setTextColor(color): void","parameters":["color"],"documentation":"\n\n**Parameters:**\n- color"},{"label":"ty:Window:setTextColour","detail":"ty:Window:setTextColour(color): void","parameters":["color"],"documentation":"\n\n**Parameters:**\n- color"},{"label":"ty:Window:setPaletteColour","detail":"ty:Window:setPaletteColour(colour, r, g, b): void","parameters":["colour","r","g","b"],"documentation":"\n\n**Parameters:**\n- colour\n- r\n- g\n- b"},{"label":"ty:Window:setPaletteColor","detail":"ty:Window:setPaletteColor(colour, r, g, b): void","parameters":["colour","r","g","b"],"documentation":"\n\n**Parameters:**\n- colour\n- r\n- g\n- b"},{"label":"ty:Window:getPaletteColour","detail":"ty:Window:getPaletteColour(colour): void","parameters":["colour"],"documentation":"\n\n**Parameters:**\n- colour"},{"label":"ty:Window:getPaletteColor","detail":"ty:Window:getPaletteColor(colour): void","parameters":["colour"],"documentation":"\n\n**Parameters:**\n- colour"},{"label":"ty:Window:setBackgroundColor","detail":"ty:Window:setBackgroundColor(color): void","parameters":["color"],"documentation":"\n\n**Parameters:**\n- color"},{"label":"ty:Window:setBackgroundColour","detail":"ty:Window:setBackgroundColour(color): void","parameters":["color"],"documentation":"\n\n**Parameters:**\n- color"},{"label":"ty:Window:getSize","detail":"ty:Window:getSize(): void","parameters":[],"documentation":""},{"label":"ty:Window:scroll","detail":"ty:Window:scroll(n): void","parameters":["n"],"documentation":"\n\n**Parameters:**\n- n"},{"label":"ty:Window:getTextColor","detail":"ty:Window:getTextColor(): void","parameters":[],"documentation":""},{"label":"ty:Window:getTextColour","detail":"ty:Window:getTextColour(): void","parameters":[],"documentation":""},{"label":"ty:Window:getBackgroundColor","detail":"ty:Window:getBackgroundColor(): void","parameters":[],"documentation":""},{"label":"ty:Window:getBackgroundColour","detail":"ty:Window:getBackgroundColour(): void","parameters":[],"documentation":""},{"label":"ty:Window:getLine","detail":"ty:Window:getLine(y: number): string","parameters":["y: number"],"documentation":"Get the buffered contents of a line in this window.\n\n**Parameters:**\n- **y: number** The y position of the line to get.\n\n**Returns:**\n- string The textual content of this line.\n- string The text colours of this line, suitable for use with term.blit.\n- string The background colours of this line, suitable for use with term.blit."},{"label":"ty:Window:setVisible","detail":"ty:Window:setVisible(visible: boolean): void","parameters":["visible: boolean"],"documentation":"Set whether this window is visible. Invisible windows will not be drawn\nto the screen until they are made visible again.\n\n**Parameters:**\n- **visible: boolean** Whether this window is visible."},{"label":"ty:Window:isVisible","detail":"ty:Window:isVisible(): boolean","parameters":[],"documentation":"Get whether this window is visible. Invisible windows will not be\ndrawn to the screen until they are made visible again.\n\n**Returns:**\n- boolean Whether this window is visible."},{"label":"ty:Window:redraw","detail":"ty:Window:redraw(): void","parameters":[],"documentation":"Draw this window. This does nothing if the window is not visible."},{"label":"ty:Window:restoreCursor","detail":"ty:Window:restoreCursor(): void","parameters":[],"documentation":"Set the current terminal's cursor to where this window's cursor is. This\ndoes nothing if the window is not visible."},{"label":"ty:Window:getPosition","detail":"ty:Window:getPosition(): number","parameters":[],"documentation":"Get the position of the top left corner of this window.\n\n**Returns:**\n- number The x position of this window.\n- number The y position of this window."},{"label":"ty:Window:reposition","detail":"ty:Window:reposition(new_x: number, new_y: number, new_width?: number, new_height: number, new_parent?: term): void","parameters":["new_x: number","new_y: number","new_width?: number","new_height: number","new_parent?: term"],"documentation":"Reposition or resize the given window.\n\n**Parameters:**\n- **new_x: number** The new x position of this window.\n- **new_y: number** The new y position of this window.\n- **new_width?: number** The new width of this window.\n- **new_height: number** The new height of this window.\n- **new_parent?: term**.Redirect The new redirect object this\nwindow should draw to."}];
  }
}
