import * as vscode from "vscode";
import BaseModule from "./base.module";
import { Method } from "../interfaces/method";

export default class turtleModule extends BaseModule {
  constructor() {
    super(`turtle`, `Turtles are a robotic device, which can break and place blocks, attack mobs, and move about the world. They havean internal inventory of 16 slots, allowing them to store blocks they have broken or would like to place.`);
  }

  protected getMethods(): Method[] {
    return [{"label":"craft","detail":"craft(limit?: number): true | false | string","parameters":["limit?: number"],"documentation":"Craft a recipe based on the turtle's inventory.\nThe turtle's inventory should set up like a crafting grid. For instance, to\ncraft sticks, slots 1 and 5 should contain planks. All other slots should be\nempty, including those outside the crafting \"grid\".\n\n**Parameters:**\n- **limit?: number** = 64 The maximum number of crafting steps to run.\n\n**Returns:**\n- true If crafting succeeds.\n- false If crafting fails.\n- string A string describing why crafting failed."},{"label":"native","detail":"native(): void","parameters":[],"documentation":"Historically this table behaved differently to the main turtle API, but this is no longer the case. You\nshould not need to use it."},{"label":"forward","detail":"forward(): boolean | string","parameters":[],"documentation":"Move the turtle forward one block.\n\n**Returns:**\n- boolean Whether the turtle could successfully move.\n- string | nil The reason the turtle could not move."},{"label":"back","detail":"back(): boolean | string","parameters":[],"documentation":"Move the turtle backwards one block.\n\n**Returns:**\n- boolean Whether the turtle could successfully move.\n- string | nil The reason the turtle could not move."},{"label":"up","detail":"up(): boolean | string","parameters":[],"documentation":"Move the turtle up one block.\n\n**Returns:**\n- boolean Whether the turtle could successfully move.\n- string | nil The reason the turtle could not move."},{"label":"down","detail":"down(): boolean | string","parameters":[],"documentation":"Move the turtle down one block.\n\n**Returns:**\n- boolean Whether the turtle could successfully move.\n- string | nil The reason the turtle could not move."},{"label":"turnLeft","detail":"turnLeft(): boolean | string","parameters":[],"documentation":"Rotate the turtle 90 degrees to the left.\n\n**Returns:**\n- boolean Whether the turtle could successfully turn.\n- string | nil The reason the turtle could not turn."},{"label":"turnRight","detail":"turnRight(): boolean | string","parameters":[],"documentation":"Rotate the turtle 90 degrees to the right.\n\n**Returns:**\n- boolean Whether the turtle could successfully turn.\n- string | nil The reason the turtle could not turn."},{"label":"dig","detail":"dig(side?: string): boolean | string","parameters":["side?: string"],"documentation":"Attempt to break the block in front of the turtle.\n\n**Parameters:**\n- **side?: string** The specific tool to use. Should be \"left\" or \"right\".\n\n**Returns:**\n- boolean Whether a block was broken.\n- string | nil The reason no block was broken."},{"label":"digUp","detail":"digUp(side?: string): boolean | string","parameters":["side?: string"],"documentation":"Attempt to break the block above the turtle. See dig for full details.\n\n**Parameters:**\n- **side?: string** The specific tool to use.\n\n**Returns:**\n- boolean Whether a block was broken.\n- string | nil The reason no block was broken."},{"label":"digDown","detail":"digDown(side?: string): boolean | string","parameters":["side?: string"],"documentation":"Attempt to break the block below the turtle. See dig for full details.\n\n**Parameters:**\n- **side?: string** The specific tool to use.\n\n**Returns:**\n- boolean Whether a block was broken.\n- string | nil The reason no block was broken."},{"label":"place","detail":"place(text?: string): boolean | string","parameters":["text?: string"],"documentation":"Place a block or item into the world in front of the turtle.\n\n**Parameters:**\n- **text?: string** When placing a sign, set its contents to this text.\n\n**Returns:**\n- boolean Whether the block could be placed.\n- string | nil The reason the block was not placed."},{"label":"placeUp","detail":"placeUp(text?: string): boolean | string","parameters":["text?: string"],"documentation":"Place a block or item into the world above the turtle.\n\n**Parameters:**\n- **text?: string** When placing a sign, set its contents to this text.\n\n**Returns:**\n- boolean Whether the block could be placed.\n- string | nil The reason the block was not placed."},{"label":"placeDown","detail":"placeDown(text?: string): boolean | string","parameters":["text?: string"],"documentation":"Place a block or item into the world below the turtle.\n\n**Parameters:**\n- **text?: string** When placing a sign, set its contents to this text.\n\n**Returns:**\n- boolean Whether the block could be placed.\n- string | nil The reason the block was not placed."},{"label":"drop","detail":"drop(count?: number): boolean | string","parameters":["count?: number"],"documentation":"Drop the currently selected stack into the inventory in front of the turtle, or as an item into the world if\nthere is no inventory.\n\n**Parameters:**\n- **count?: number** The number of items to drop. If not given, the entire stack will be dropped.\n\n**Returns:**\n- boolean Whether items were dropped.\n- string | nil The reason the no items were dropped."},{"label":"dropUp","detail":"dropUp(count?: number): boolean | string","parameters":["count?: number"],"documentation":"Drop the currently selected stack into the inventory above the turtle, or as an item into the world if there is\nno inventory.\n\n**Parameters:**\n- **count?: number** The number of items to drop. If not given, the entire stack will be dropped.\n\n**Returns:**\n- boolean Whether items were dropped.\n- string | nil The reason the no items were dropped."},{"label":"dropDown","detail":"dropDown(count?: number): boolean | string","parameters":["count?: number"],"documentation":"Drop the currently selected stack into the inventory below the turtle, or as an item into the world if\nthere is no inventory.\n\n**Parameters:**\n- **count?: number** The number of items to drop. If not given, the entire stack will be dropped.\n\n**Returns:**\n- boolean Whether items were dropped.\n- string | nil The reason the no items were dropped."},{"label":"select","detail":"select(slot: number): true","parameters":["slot: number"],"documentation":"Change the currently selected slot.\n\n**Parameters:**\n- **slot: number** The slot to select.\n\n**Returns:**\n- true When the slot has been selected."},{"label":"getItemCount","detail":"getItemCount(slot?: number): number","parameters":["slot?: number"],"documentation":"Get the number of items in the given slot.\n\n**Parameters:**\n- **slot?: number** The slot we wish to check. Defaults to the selected slot.\n\n**Returns:**\n- number The number of items in this slot."},{"label":"getItemSpace","detail":"getItemSpace(slot?: number): number","parameters":["slot?: number"],"documentation":"Get the remaining number of items which may be stored in this stack.\n\n**Parameters:**\n- **slot?: number** The slot we wish to check. Defaults to the selected slot.\n\n**Returns:**\n- number The space left in this slot."},{"label":"detect","detail":"detect(): boolean","parameters":[],"documentation":"Check if there is a solid block in front of the turtle. In this case, solid refers to any non-air or liquid\nblock.\n\n**Returns:**\n- boolean If there is a solid block in front."},{"label":"detectUp","detail":"detectUp(): boolean","parameters":[],"documentation":"Check if there is a solid block above the turtle. In this case, solid refers to any non-air or liquid block.\n\n**Returns:**\n- boolean If there is a solid block above."},{"label":"detectDown","detail":"detectDown(): boolean","parameters":[],"documentation":"Check if there is a solid block below the turtle. In this case, solid refers to any non-air or liquid block.\n\n**Returns:**\n- boolean If there is a solid block below."},{"label":"compare","detail":"compare(): boolean","parameters":[],"documentation":"Check if the block in front of the turtle is equal to the item in the currently selected slot.\n\n**Returns:**\n- boolean If the block and item are equal."},{"label":"compareUp","detail":"compareUp(): boolean","parameters":[],"documentation":"Check if the block above the turtle is equal to the item in the currently selected slot.\n\n**Returns:**\n- boolean If the block and item are equal."},{"label":"compareDown","detail":"compareDown(): boolean","parameters":[],"documentation":"Check if the block below the turtle is equal to the item in the currently selected slot.\n\n**Returns:**\n- boolean If the block and item are equal."},{"label":"attack","detail":"attack(side?: string): boolean | string","parameters":["side?: string"],"documentation":"Attack the entity in front of the turtle.\n\n**Parameters:**\n- **side?: string** The specific tool to use.\n\n**Returns:**\n- boolean Whether an entity was attacked.\n- string | nil The reason nothing was attacked."},{"label":"attackUp","detail":"attackUp(side?: string): boolean | string","parameters":["side?: string"],"documentation":"Attack the entity above the turtle.\n\n**Parameters:**\n- **side?: string** The specific tool to use.\n\n**Returns:**\n- boolean Whether an entity was attacked.\n- string | nil The reason nothing was attacked."},{"label":"attackDown","detail":"attackDown(side?: string): boolean | string","parameters":["side?: string"],"documentation":"Attack the entity below the turtle.\n\n**Parameters:**\n- **side?: string** The specific tool to use.\n\n**Returns:**\n- boolean Whether an entity was attacked.\n- string | nil The reason nothing was attacked."},{"label":"suck","detail":"suck(count?: number): boolean | string","parameters":["count?: number"],"documentation":"Suck an item from the inventory in front of the turtle, or from an item floating in the world.\n\n**Parameters:**\n- **count?: number** The number of items to suck. If not given, up to a stack of items will be picked up.\n\n**Returns:**\n- boolean Whether items were picked up.\n- string | nil The reason the no items were picked up."},{"label":"suckUp","detail":"suckUp(count?: number): boolean | string","parameters":["count?: number"],"documentation":"Suck an item from the inventory above the turtle, or from an item floating in the world.\n\n**Parameters:**\n- **count?: number** The number of items to suck. If not given, up to a stack of items will be picked up.\n\n**Returns:**\n- boolean Whether items were picked up.\n- string | nil The reason the no items were picked up."},{"label":"suckDown","detail":"suckDown(count?: number): boolean | string","parameters":["count?: number"],"documentation":"Suck an item from the inventory below the turtle, or from an item floating in the world.\n\n**Parameters:**\n- **count?: number** The number of items to suck. If not given, up to a stack of items will be picked up.\n\n**Returns:**\n- boolean Whether items were picked up.\n- string | nil The reason the no items were picked up."},{"label":"getFuelLevel","detail":"getFuelLevel(): number | \"unlimited\"","parameters":[],"documentation":"Get the maximum amount of fuel this turtle currently holds.\n\n**Returns:**\n- number The current amount of fuel a turtle this turtle has.\n- \"unlimited\" If turtles do not consume fuel when moving."},{"label":"refuel","detail":"refuel(count?: number): true | false | string","parameters":["count?: number"],"documentation":"Refuel this turtle.\n\n**Parameters:**\n- **count?: number** The maximum number of items to consume. One can pass 0 to check if an item is combustable or not.\n\n**Returns:**\n- true If the turtle was refuelled.\n- false If the turtle was not refuelled.\n- string The reason the turtle was not refuelled.\n\n**Usage:**\n\nRefuel a turtle from the currently selected slot.\n\n```\n\nlocal level = turtle.getFuelLevel()\n\nif level == \"unlimited\" then error(\"Turtle does not need fuel\", 0) end\n\n\n\nlocal ok, err = turtle.refuel()\n\nif ok then\n\n  local new_level = turtle.getFuelLevel()\n\n  print((\"Refuelled %d, current level is %d\"):format(new_level - level, new_level))\n\nelse\n\n  printError(err)\n\nend\n\nCheck if the current item is a valid fuel source.\n\nlocal is_fuel, reason = turtle.refuel(0)\n\nif not is_fuel then printError(reason) end\n\n```"},{"label":"compareTo","detail":"compareTo(slot: number): boolean","parameters":["slot: number"],"documentation":"Compare the item in the currently selected slot to the item in another slot.\n\n**Parameters:**\n- **slot: number** The slot to compare to.\n\n**Returns:**\n- boolean If the two items are equal."},{"label":"transferTo","detail":"transferTo(slot: number, count?: number): boolean","parameters":["slot: number","count?: number"],"documentation":"Move an item from the selected slot to another one.\n\n**Parameters:**\n- **slot: number** The slot to move this item to.\n- **count?: number** The maximum number of items to move.\n\n**Returns:**\n- boolean If some items were successfully moved."},{"label":"getSelectedSlot","detail":"getSelectedSlot(): number","parameters":[],"documentation":"Get the currently selected slot.\n\n**Returns:**\n- number The current slot."},{"label":"getFuelLimit","detail":"getFuelLimit(): number | \"unlimited\"","parameters":[],"documentation":"Get the maximum amount of fuel this turtle can hold.\n\n**Returns:**\n- number The maximum amount of fuel a turtle can hold.\n- \"unlimited\" If turtles do not consume fuel when moving."},{"label":"equipLeft","detail":"equipLeft(): true | false | string","parameters":[],"documentation":"Equip (or unequip) an item on the left side of this turtle.\n\n**Returns:**\n- true If the item was equipped.\n- false If we could not equip the item.\n- string The reason equipping this item failed."},{"label":"equipRight","detail":"equipRight(): true | false | string","parameters":[],"documentation":"Equip (or unequip) an item on the right side of this turtle.\n\n**Returns:**\n- true If the item was equipped.\n- false If we could not equip the item.\n- string The reason equipping this item failed."},{"label":"inspect","detail":"inspect(): boolean | table","parameters":[],"documentation":"Get information about the block in front of the turtle.\n\n**Returns:**\n- boolean Whether there is a block in front of the turtle.\n- table | string Information about the block in front, or a message explaining that there is no block.\n\n**Usage:**\n\nlocal has_block, data = turtle.inspect()\n\n```\n\nif has_block then\n\n  print(textutils.serialise(data))\n\n  -- {\n\n  --   name = \"minecraft:oak_log\",\n\n  --   state = { axis = \"x\" },\n\n  --   tags = { [\"minecraft:logs\"] = true, ... },\n\n  -- }\n\nelse\n\n  print(\"No block in front of the turtle\")\n\nend\n\n```"},{"label":"inspectUp","detail":"inspectUp(): boolean | table","parameters":[],"documentation":"Get information about the block above the turtle.\n\n**Returns:**\n- boolean Whether there is a block above the turtle.\n- table | string Information about the above below, or a message explaining that there is no block."},{"label":"inspectDown","detail":"inspectDown(): boolean | table","parameters":[],"documentation":"Get information about the block below the turtle.\n\n**Returns:**\n- boolean Whether there is a block below the turtle.\n- table | string Information about the block below, or a message explaining that there is no block."},{"label":"getItemDetail","detail":"getItemDetail(slot?: number, detailed?: boolean): nil","parameters":["slot?: number","detailed?: boolean"],"documentation":"Get detailed information about the items in the given slot.\n\n**Parameters:**\n- **slot?: number** The slot to get information about. Defaults to the selected slot.\n- **detailed?: boolean** Whether to include \"detailed\" information. When true the method will contain much\nmore information about the item at the cost of taking longer to run.\n\n**Returns:**\n- nil | table Information about the given slot, or nil if it is empty.\n\n**Usage:**\n\nPrint the current slot, assuming it contains 13 dirt.\n\n```\n\nprint(textutils.serialise(turtle.getItemDetail()))\n\n-- => {\n\n--  name = \"minecraft:dirt\",\n\n--  count = 13,\n\n-- }\n\n```"}];
  }
}
